# library(CNORode)
#
# paramsSSm=defaultParametersSSm()
#
# ode_parameters=createLBodeContPars(integratedModel$model, LB_n = 1, LB_k = 0,
#                                    LB_tau = 0, UB_n = 3, UB_k = 1, UB_tau = 1, default_n = 3,
#                                    default_k = 0.5, default_tau = 0.01, opt_n = FALSE, opt_k = TRUE,
#                                    opt_tau = TRUE, random = TRUE)
#
# result = runDynamicFeeder(cnolist = cnolist, integratedModel = integratedModel,
#                           ode_parameters = ode_parameters, paramsSSm = paramsSSm,
#                           penFactor_k = 2, penFactorPIN_k = 0.1, penFactor_tau = 1)
#
rm(list = ls())
?integrateLinks
data(feederObject_toy,package="CNORfeeder")
data(CNOlistToy_Gene, package="CNORfeeder")
data(CNOlistToy_Gene, package="CNORfeeder")
integratedModel = integrateLinks(feederObject = feederObject, cnolist = cnolist,
database = NULL)
rm(list = ls())
?identifyMisfitIndices
data(ToyModel_Gene, package="CNORfeeder")
data(CNOlistToy_Gene, package="CNORfeeder")
data(indices,package="CNORfeeder")
data(database, package="CNORfeeder")
indices = identifyMisfitIndices(cnolist = cnolist, model = model,
simData = simData, mseThresh = 0.05)
data(ToyModel_Gene, package="CNORfeeder")
data(CNOlistToy_Gene, package="CNORfeeder")
data(indices,package="CNORfeeder")
data(database, package="CNORfeeder")
indices = identifyMisfitIndices(cnolist = cnolist, model = model,
simData = simData, mseThresh = 0.05)
rm(list = ls())
data(ToyModel_Gene, package="CNORfeeder")
data(CNOlistToy_Gene, package="CNORfeeder")
data(indices,package="CNORfeeder")
data(database, package="CNORfeeder")
data(simData_toy,package="CNORfeeder")
indices = identifyMisfitIndices(cnolist = cnolist, model = model,
simData = simData, mseThresh = 0.05)
indices$indices
rm(list = ls())
data(ToyModel_Gene, package="CNORfeeder")
data(CNOlistToy_Gene, package="CNORfeeder")
data(simData_toy,package="CNORfeeder")
feederObject = buildFeederObjectDynamic(model = model, cnolist = cnolist,
indices = NULL, database = NULL,
DDN = TRUE, pathLength = 2)
remove.packages("CNORfeeder")
rm(list = ls())
remove.packages("CNORfeeder")
install.packages("CNORfeeder/", repos = NULL, type="source")
library(CNORfeeder)
?buildFeederObjectDynamic
data(ToyModel_Gene, package="CNORfeeder")
data(CNOlistToy_Gene, package="CNORfeeder")
data(simData_toy,package="CNORfeeder")
feederObject = buildFeederObjectDynamic(model = model, cnolist = cnolist,
indices = NULL, database = NULL,
DDN = TRUE, pathLength = 2)
rm(list = ls())
?identifyMisfitIndices
data(ToyModel_Gene, package="CNORfeeder")
data(CNOlistToy_Gene, package="CNORfeeder")
data(indices,package="CNORfeeder")
data(database, package="CNORfeeder")
data(simData_toy,package="CNORfeeder")
indices = identifyMisfitIndices(cnolist = cnolist, model = model,
simData = simData, mseThresh = 0.05)
rm(list = ls())
?integrateLinks
data(feederObject_toy,package="CNORfeeder")
data(CNOlistToy_Gene, package="CNORfeeder")
data(CNOlistToy_Gene, package="CNORfeeder")
integratedModel = integrateLinks(feederObject = feederObject, cnolist = cnolist,
database = NULL)
rm(list = ls())
?runDynamicFeeder
data(integratedModel_toy, package="CNORfeeder")
data(CNOlistToy_Gene, package="CNORfeeder")
data(simData_toy,package="CNORfeeder")
## To be run with the recent version of the CNORode package:
## https://github.com/saezlab/CNORode
#
# library(CNORode)
#
# paramsSSm=defaultParametersSSm()
#
# ode_parameters=createLBodeContPars(integratedModel$model, LB_n = 1, LB_k = 0,
#                                    LB_tau = 0, UB_n = 3, UB_k = 1, UB_tau = 1, default_n = 3,
#                                    default_k = 0.5, default_tau = 0.01, opt_n = FALSE, opt_k = TRUE,
#                                    opt_tau = TRUE, random = TRUE)
#
# result = runDynamicFeeder(cnolist = cnolist, integratedModel = integratedModel,
#                           ode_parameters = ode_parameters, paramsSSm = paramsSSm,
#                           penFactor_k = 2, penFactorPIN_k = 0.1, penFactor_tau = 1)
#
rm(list = ls())
library(BiocCheck)
BiocCheck("CNORfeeder")
library(CellNOptR)
?ilpBinaryT1
library(BiocCheck)
getwd()
BiocCheck(package = "~/Documents/GitHub/CellNOptR/")
BiocCheck(package = "~/Documents/GitHub/CellNOptR/")
remove.packages("CellNOptR")
library(devtools)
install_github(repo = "saezlab/CellNOptR", build_vignettes = TRUE)
vignette("CellNOptR-vignette")
library(CellNOptR)
?createAndRunILP
remove.packages("CellNOptR")
library(devtools)
install_github(repo = "saezlab/CellNOptR", ref = "bioc_guidelines", build_vignettes = TRUE)
install_github(repo = "saezlab/CellNOptR", ref = "bioc_guidelines", build_vignettes = TRUE)
vignette("CellNOptR-vignette")
library(CellNOptR)
?createAndRunILP
?createILPBitstringAll
?create_binaries
?crossvalidateBoolean
?ilpBinaryT1
?ilpBinaryT2
?ilpBinaryTN
?invokeCPLEX
?writeFile
?writeObjectiveFunction
?write_bounds
?write_constraints
remove.packages("CellNOptR")
library(devtools)
install_github(repo = "saezlab/CellNOptR", ref = "bioc_guidelines", build_vignettes = TRUE)
library(CellNOptR)
?ilpBinaryT1
# Toy Exampple
data("ToyModel", package="CellNOptR")
data("CNOlistToy", package="CellNOptR")
pknmodel = ToyModel
cnolist = CNOlist(CNOlistToy)
model = preprocessing(data = cnolist, model = pknmodel, compression = TRUE, expansion = TRUE)
plotModel(model = model, CNOlist = cnolist)
resILP = ilpBinaryT1(cnolist = cnolist, model = model, cplexPath = "~/Documents/cplex")
resILP
?crossvalidateBoolean
rm(list = ls())
data("ToyModel", package="CellNOptR")
data("CNOlistToy", package="CellNOptR")
pknmodel = ToyModel
cnodata = CNOlist(CNOlistToy)
# original and preprocessed network
plotModel(pknmodel,cnodata)
model = preprocessing(data = cnodata,
model = pknmodel,
compression = TRUE,
expansion = TRUE)
plotModel(model,cnodata)
# original CNOlist contains many timepoints, we use only a subset
plot(cnodata)
selectedTime = c(0,10)
cnodata_prep = cutCNOlist(cnodata,
model = model,
cutTimeIndices = which(!cnodata@timepoints %in% selectedTime))
plot(cnodata_prep)
# optimise and show results
opt = gaBinaryT1(CNOlist = cnodata_prep,model = model,verbose = FALSE)
# 10-fold crossvalidation using T1 data
# We use only T1 data for crossvalidation, because data in the T0 matrix is not independent.
# All rows of data in T0 describes the basal condition.
# Crossvalidation produce some text in the command window:
## Not run:
library(doParallel)
registerDoParallel(cores=3)
R=crossvalidateBoolean(CNOlist = cnodata_prep,
model = model,
type="datapoint",
nfolds=10,
parallel = TRUE)
R
?createAndRunILP
library(BiocCheck)
getwd()
BiocCheck("CNORfeeder")
rm(list = ls())
install.packages("catnet")
install.packages("minet")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("minet")
library(BiocCheck)
BiocCheck(package = "~/Documents/GitHub/CARNIVAL/")
BiocCheck(package = "~/Documents/GitHub/CARNIVAL/")
library(BiocCheck)
BiocCheck(package = "Documents/GitHub/CARNIVAL/")
BiocCheck(package = "Documents/GitHub/CARNIVAL/")
remove.packages("progeny")
library(devtools)
install_github(repo = "saezlab/progeny", build_vignettes = TRUE)
install_github(repo = "saezlab/progeny", build_vignettes = TRUE)
install_github(repo = "saezlab/dorothea", build_vignettes = TRUE)
install_github(repo = "saezlab/progeny", build_vignettes = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("progeny")
library(progeny)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("dorothea")
library(CARNIVAL)
load(file = system.file("toy_inputs_ex1.RData",
package="CARNIVAL"))
load(file = system.file("toy_measurements_ex1.RData",
package="CARNIVAL"))
load(file = system.file("toy_network_ex1.RData",
package="CARNIVAL"))
# lpSolve
result = runCARNIVAL(inputObj = toy_inputs_ex1, measObj = toy_measurements_ex1,
netObj = toy_network_ex1)
result
library(CARNIVAL) # load CARNIVAL library
load(file = system.file("toy_measurements_ex2.RData",
package="CARNIVAL"))
load(file = system.file("toy_network_ex2.RData",
package="CARNIVAL"))
# lpSolve
result = runCARNIVAL(measObj = toy_measurements_ex2, netObj = toy_network_ex2)
result
vignette("progeny")
remove.packages("CARNIVAL")
library(devtools)
rm(list = ls())
install_github(repo = "saezlab/CARNIVAL-Bioconductor-Dev", build_vignettes = TRUE)
vignette("CARNIVAL-vignette")
remove.packages("CARNIVAL")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("CARNIVAL")
library(CARNIVAL)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("CARNIVAL")
library(readr)
Group <- read_csv("~/Documents/GitHub/EDN_phospho/Background-Network/inst/Group.csv")
View(Group)
kk <- as.matrix(x = Group)
View(kk)
write.table(x = kk, file = "kk.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
getwd()
vignette("CARNIVAL")
vignette(CARNIVAL)
vignette("CARNIVAL-vignette")
library(readr)
MyHeritage_raw_dna_data <- read_csv("~/Downloads/MyHeritage_raw_dna_data.csv")
View(MyHeritage_raw_dna_data)
rm(list = ls())
library(readr)
MyHeritage_raw_dna_data <- read_delim("~/Downloads/MyHeritage_raw_dna_data.csv",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(MyHeritage_raw_dna_data)
data <- MyHeritage_raw_dna_data
data$`RSID,CHROMOSOME,POSITION,RESULT`
length(data[, 1])
dd <- data
length(strsplit(x = dd$`RSID,CHROMOSOME,POSITION,RESULT`[1], split = ",", fixed = TRUE)[[1]])
sapply(strsplit(x = dd$`RSID,CHROMOSOME,POSITION,RESULT`, split = ",", fixed = TRUE), `[`, 4)
aa <- sapply(strsplit(x = dd$`RSID,CHROMOSOME,POSITION,RESULT`, split = ",", fixed = TRUE), `[`, 4)
aa[1]
ss <- gsub(pattern = "\", replacement = "", x = aa, fixed = TRUE)
)
)
))))))
}
ehtrleksj taw
qewr
w;e
R;
my_data <- ToothGrowth
install.packages("dplyr")
library(dplyr)
set.seed(1234)
dplyr::sample_n(my_data, 10)
my_data$dose <- factor(my_data$dose,
levels = c(0.5, 1, 2),
labels = c("D0.5", "D1", "D2"))
head(my_data)
res.aov2 <- aov(len ~ supp + dose, data = my_data)
summary(res.aov2)
res.aov2$coefficients
mat <- cbind(c(1,1,1,rep(0,9)),
c(0,0,0,1,1,1,rep(0,6)),
c(rep(0,6),1,1,1,0,0,0),
c(rep(0,9),1,1,1))
mat
colnames(mat) <- c("nu","nt","tu","tt")
mat
makeContrasts(tu - nu, tt - tu,
+ tt - tu - nt + nu,
+ levels = mat)
makeContrasts(tu - nu, tt - tu,
tt - tu - nt + nu,
levels = mat)
library(limma)
makeContrasts(tu - nu, tt - tu,
tt - tu - nt + nu,
levels = mat)
typ <- factor(rep(c("Norm","Tum"), each = 6))
typ
trt <- factor(rep(c("Untrt", "Trt"),each = 3, times=1
)
)
trt <- factor(rep(c("Untrt", "Trt"),each = 3, times=1))
typ
trt
trt <- factor(rep(c("Untrt", "Trt"),each = 3, times=2))
trt
mat <- model.matrix(~0+trt*typ)
ph@data[ ,2] = c("noPat","notPat","noPat","Pat","Pat","Pat","noPat","noPat","noPat","Pat","Pat","Pat")
colnames(ph@data)[2]="Pathogen"
ph@data[ ,3] = c("noTr","noTr","noTr","noTr","noTr","noTr","Tr","Tr","Tr","Tr","Tr","Tr")
colnames(ph@data)[3]="Treatment"
rm(list = ls())
pp <- factor(c("noPat","notPat","noPat","Pat","Pat","Pat","noPat","noPat","noPat","Pat","Pat","Pat"))
tt <- factor(c("noTr","noTr","noTr","noTr","noTr","noTr","Tr","Tr","Tr","Tr","Tr","Tr"))
pp
tt
design <- model.matrix(~pp*tt)
design
mm <- cbind(as.matrix(c("noPat","notPat","noPat","Pat","Pat","Pat","noPat","noPat","noPat","Pat","Pat","Pat")), as.matrix(c("noTr","noTr","noTr","noTr","noTr","noTr","Tr","Tr","Tr","Tr","Tr","Tr")))
mm
design
coefs <- matrix(c(rep(0, 500), rnorm(1000, mean = 0, sd = 10)), ncol = 3)
head(coefs)
labels <- factor(
c(rep('Normal', 111), rep('Medium', 58), rep('High', 31)),
levels = c('Normal', 'Medium', 'High')
)
labels
length(labels)
View(coefs)
design <- model.matrix(~ -1 + labels)
colnames(design) <- levels(labels)
design
class(design)
contrast.matrix <- makeContrasts(
MN = Medium - Normal,
HN = High - Normal,
HM = High - Medium,
levels = design
)
library(limma)
contrast.matrix <- makeContrasts(
MN = Medium - Normal,
HN = High - Normal,
HM = High - Medium,
levels = design
)
contrast.matrix
assay.mat <- t(apply(
coefs,
1,
function(coef.row){
means = design %*% coef.row
rnorm(length(means), mean = means, sd = 0.1)
}
))
par(mfrow = c(2,2))
for(i in 1:4){
plot(assay.mat[i, ] ~ labels, ylim = c(-20, 20))
}
eset <- ExpressionSet(
assayData = assay.mat
)
library(Biobase)
eset <- ExpressionSet(
assayData = assay.mat
)
eset
eset@experimentData
nom <- c("mRNA",
"DNA",
"cDNA",
"pTyr",
"pSer",
"pThr",
"PKN",
"TF",
"ILP",
"PTM",
"FlowC",
"xMAP",
"cyTOF",
"IMC",
"T-MS",
"UT-MS",
"RPPA",
"Limma",
"GSEA",
"stdCARNIVAL",
"invCARNIVAL",
"CARNIVAL",
"CARNIVAL-cond",
"CARNIVAL-mult",
"CCLE",
"GMM",
"K/P-S",
"PHONEMeS",
"PHONEMeS-mult",
"PHONEMeS-ud",
"MS",
"CellNOpt",
"CNORode",
"CNORfuzzy",
"MSE",
"RSS",
"ODE",
"CASPO",
"ASP",
"GA",
"LPSA",
"GSEA",
"SIF",
"fgsea",
"Sva"
)
nomnom <- c("PKN",
"TF",
"ILP",
"PTM",
"Limma",
"GSEA",
"stdCARNIVAL",
"invCARNIVAL",
"CARNIVAL",
"CARNIVAL-cond",
"CARNIVAL-mult",
"GMM",
"K/P-S",
"PHONEMeS",
"PHONEMeS-mult",
"PHONEMeS-ud",
"MS",
"CellNOpt",
"ODE",
"MSE",
"RSS",
"ODE",
"CASPO",
"ASP",
"GA",
"LPSA",
"GSEA",
"SIF",
"SBMLQual"
)
nomS <- sort(x = nomnom, decreasing = FALSE)
nomS
nomS <- unique(nomS)
nomS
library(readr)
ctrl <- read_delim(file = "~/Desktop/BED/runx1_ctrl_2.bed", delim = "\t", col_names = FALSE)
ctrl <- ctrl[-which(ctrl$X6=="."), ]
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker")
setwd("~/Documents/PHONEMeS-ILP/")
setwd("~/Documents/GitHub/PHONEMeS-ILP/")
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(dplyr)
library(readxl)
library(readr)
load(file = system.file("NetworKIN_noCSK_filt.RData", package="PHONEMeS"))
load(file = system.file("inputObj_Terfve.RData", package="PHONEMeS"))
View(allD)
# Preparation of the background network from the allD list of K/P-S interactions
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
# Creating the list where we show the experimental conditions
conditions <- list(c("AKT1 - Control", "AKT2 - Control"), c("CAMK1 - Control", "CAMK2 - Control"),
c("EGFR1 - Control", "EGFR2 - Control"), c("ERK1 - Control", "ERK2 - Control"),
c("MEK1 - Control", "MEK2 - Control"), c("MTOR1 - Control", "MTOR2 - Control"),
c("P70S6K1 - Control", "P70S6K2 - Control"), c("PI3K1 - Control", "PI3K2 - Control"),
c("PKC1 - Control", "PKC2 - Control"), c("ROCK1 - Control", "ROCK2 - Control"))
names(conditions) <- c("AKT1_HUMAN", "KCC2D_HUMAN", "EGFR_HUMAN", "MK01_HUMAN",
"MP2K1_HUMAN", "MTOR_HUMAN",  "KS6B1_HUMAN", "PK3CA_HUMAN",
"KPCA_HUMAN", "ROCK1_HUMAN")
# For each experimental condition we assign a perturbation target
targets.P<-list(cond1=c("AKT1_HUMAN", "AKT2_HUMAN"), cond2=c("KCC2A_HUMAN", "KCC2B_HUMAN", "KCC2C_HUMAN", "KCC2D_HUMAN"), cond3=c("EGFR_HUMAN", "ERBB2_HUMAN"),
cond4=c("MK01_HUMAN", "MK03_HUMAN", "MK14_HUMAN"), cond5=c("MP2K1_HUMAN", "MP2K2_HUMAN"), cond6=c("MTOR_HUMAN"), cond7=c("KS6B1_HUMAN", "KS6B2_HUMAN"),
cond8=c("PK3CA_HUMAN", "PK3CD_HUMAN", "MTOR_HUMAN"), cond9=c("KPCA_HUMAN", "KPCB_HUMAN", "KPCG_HUMAN", "KPCE_HUMAN"), cond10=c("ROCK1_HUMAN", "ROCK2_HUMAN"))
experiments <- c(6) # for MTORi case
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, inputObj = inputObj, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "no")
path_to_executable_solver = "~/Documents/cplex"
View(resultsMulti)
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, inputObj = inputObj, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "no", populate = 100, solverPath = path_to_executable_solver)
View(resultsMulti)
experiments <- c(1, 6, 8)
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, inputObj = inputObj, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "no", populate = 100, solverPath = path_to_executable_solver)
temp <- resultsMulti
View(temp)
resultsMulti <- runPHONEMeS_Downsampling(targets.P = targets.P, conditions = conditions, inputObj = inputObj, experiments = experiments, bg = bg, nIter = 100, nK = "no")
