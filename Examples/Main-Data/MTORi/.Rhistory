distVar
# meas <- gsub(pattern = ".*[{]([^.]+)[}].*", replacement = "\\1", x = distVar[i], fixed = TRUE)
meas1 <- strsplit(x = distVar[i], split = "{", fixed = TRUE)[[1]][2]
meas1
meas <- strsplit(x = meas1, split = "}", fixed = TRUE)[[1]][1]
meas
cc1 <- c()
cc2 <- c()
cc3 <- c()
sif <- createSIF(pknList = pknList)
species <- unique(c(sif[, 1], sif[, 3]))
distVar <- c()
for(ii in 1:nrow(dataMatrix[[1]])){
distVar <- c(distVar, paste0("dist{", species, "}_", ii))
}
speciesVar <- binaries[[1]][grepl(pattern = "species", x = binaries[[3]])]
speciesExp <- binaries[[3]][grepl(pattern = "species", x = binaries[[3]])]
for(i in 1:length(distVar)){
# meas <- gsub(pattern = ".*[{]([^.]+)[}].*", replacement = "\\1", x = distVar[i], fixed = TRUE)
meas1 <- strsplit(x = distVar[i], split = "{", fixed = TRUE)[[1]][2]
meas <- strsplit(x = meas1, split = "}", fixed = TRUE)[[1]][1]
exp <- strsplit(x = distVar[i], split = "_", fixed = TRUE)[[1]][length(strsplit(x = distVar[i], split = "_", fixed = TRUE)[[1]])]
cc1 <- c(cc1, paste0(binaries[[1]][which(binaries[[3]]==paste0("species ", meas, " in experiment ", exp))], " - ", distVar[i], " <= 0"))
}
cc1
binaries[[3]][227]
##
reacVar <- binaries[[1]][grepl(pattern = "interaction", x = binaries[[3]])]
reacExp <- binaries[[3]][grepl(pattern = "interaction", x = binaries[[3]])]
cnt <- 1
for(ii in 1:nrow(dataMatrix[[1]])){
for(i in 1:nrow(sif)){
ss <- sif[i, 1]
tt <- sif[i, 3]
cc2 <- c(cc2, paste0(paste0("dist{", tt, "}_", ii), " - ", paste0("dist{", ss, "}_", ii), " - ", M, " ", reacVar[cnt], " >= ", 1-M))
cnt <- cnt + 1
}
}
cc2
rm(list = ls())
# Load packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(dplyr)
# Call the PHONEMeS functions
source("../../../Public/buildDataMatrix.R")
source("../../../Public/ilpFunctions.R")
source("../../../Public/buildDataObject.R")
source("../../../Public/build_Nw.R")
source("../../../Public/build_PKN.R")
# Loading database and dat-object
load(file='allD_noCSK_filt.RData')
load(file='dataObjects_PHONEMeS.RData')
#Make the data objects that will be needed
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
dataGMM<-new("GMMres", res=GMM.res.noFC, IDmap=GMM.res.ID, resFC=GMM.res)
conditions <- list(c("AKT1 - Control", "AKT2 - Control"), c("CAMK1 - Control", "CAMK2 - Control"),
c("EGFR1 - Control", "EGFR2 - Control"), c("ERK1 - Control", "ERK2 - Control"),
c("MEK1 - Control", "MEK2 - Control"), c("MTOR1 - Control", "MTOR2 - Control"),
c("P70S6K1 - Control", "P70S6K2 - Control"), c("PI3K1 - Control", "PI3K2 - Control"),
c("PKC1 - Control", "PKC2 - Control"), c("ROCK1 - Control", "ROCK2 - Control"))
names(conditions) <- c("AKT1_HUMAN", "KCC2D_HUMAN", "EGFR_HUMAN", "MK01_HUMAN",
"MP2K1_HUMAN", "MTOR_HUMAN",  "KS6B1_HUMAN", "PK3CA_HUMAN",
"KPCA_HUMAN", "ROCK1_HUMAN")
targets.P<-list(cond1=c("AKT1_HUMAN", "AKT2_HUMAN"), cond2=c(), cond3=c(), cond4=c(),
cond5=c(), cond6=c("MTOR_HUMAN"), cond7=c(), cond8=c("PK3CA_HUMAN", "PK3CD_HUMAN", "MTOR_HUMAN"),
cond9=c(), cond10=c())
# Select experimental condition
experiments <- c(6) # for MTORi case
# Running PHONEMeS - cplex
# Run PHONEMeS with multiple solutions
# source("../../../Public/runPHONEMeS.R")
# resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "no")
# write.table(x = resultsMulti, file = "MTORi_sif.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
#
# source("../../../Public/assignAttributes.R")
# nodesAttributes <- assignAttributes(sif = resultsMulti, dataGMM = dataGMM, targets = targets.P[experiments], writeAttr = TRUE)
source("../../../Public/runPHONEMeS_Downsampling.R")
resultsSampling <- runPHONEMeS_Downsampling(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nIter = 100, nK = "no")
write.table(x = resultsSampling, file = "MTORi_sif_sampling.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
source("../../../Public/assignAttributes.R")
nodesAttributes <- assignAttributes(sif = resultsSampling, dataGMM = dataGMM, targets = targets.P[experiments], writeAttr = TRUE)
# Running PHONEMeS - cplex
# Run PHONEMeS with multiple solutions from CPLEX
# source("../../../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "no")
# Running PHONEMeS - cplex
# Run PHONEMeS with multiple solutions from CPLEX
# source("../../../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "no")
# Running PHONEMeS - cplex
# Run PHONEMeS with multiple solutions from CPLEX
source("../../../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "no")
# Running PHONEMeS - cplex
# Run PHONEMeS with multiple solutions from CPLEX
source("../../../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "no")
rm(list = ls())
# Load packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(dplyr)
# Call the PHONEMeS functions
source("../../../Public/buildDataMatrix.R")
source("../../../Public/ilpFunctions.R")
source("../../../Public/buildDataObject.R")
source("../../../Public/build_Nw.R")
source("../../../Public/build_PKN.R")
# Loading database and dat-object
load(file='allD_noCSK_filt.RData')
load(file='dataObjects_PHONEMeS.RData')
#Make the data objects that will be needed
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
dataGMM<-new("GMMres", res=GMM.res.noFC, IDmap=GMM.res.ID, resFC=GMM.res)
conditions <- list(c("AKT1 - Control", "AKT2 - Control"), c("CAMK1 - Control", "CAMK2 - Control"),
c("EGFR1 - Control", "EGFR2 - Control"), c("ERK1 - Control", "ERK2 - Control"),
c("MEK1 - Control", "MEK2 - Control"), c("MTOR1 - Control", "MTOR2 - Control"),
c("P70S6K1 - Control", "P70S6K2 - Control"), c("PI3K1 - Control", "PI3K2 - Control"),
c("PKC1 - Control", "PKC2 - Control"), c("ROCK1 - Control", "ROCK2 - Control"))
names(conditions) <- c("AKT1_HUMAN", "KCC2D_HUMAN", "EGFR_HUMAN", "MK01_HUMAN",
"MP2K1_HUMAN", "MTOR_HUMAN",  "KS6B1_HUMAN", "PK3CA_HUMAN",
"KPCA_HUMAN", "ROCK1_HUMAN")
targets.P<-list(cond1=c("AKT1_HUMAN", "AKT2_HUMAN"), cond2=c(), cond3=c(), cond4=c(),
cond5=c(), cond6=c("MTOR_HUMAN"), cond7=c(), cond8=c("PK3CA_HUMAN", "PK3CD_HUMAN", "MTOR_HUMAN"),
cond9=c(), cond10=c())
# Select experimental condition
experiments <- c(6) # for MTORi case
# Running PHONEMeS - cplex
# Run PHONEMeS with multiple solutions from CPLEX
source("../../../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "no")
write.table(x = resultsMulti, file = "MTORi_sif_cplex.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
solver = "cplex"
nSolutions = 100
nK = "no"
mipgap=0.05
relgap=1e-04
replace=2
populate=5000
intensity=4
timelimit=3600
conditions <- conditions[experiments]
valid_solver_list <- c("cplex", "cbc")
if (!(solver %in% valid_solver_list)){
stop(paste0("Select a valid solver option (", paste(valid_solver_list, collapse=", "), ")"))
}
data.P <- dataBycond(dataGMM, bg, scaled=TRUE, rowBycond=conditions)
show(data.P)
speciesP(data.P)
targets.P <- targets.P[experiments]
pknList<-build_Nw(data.On=data.P, targets.On=targets.P, bg=bg, nK=nK)
show(pknList)
TG <- unique(unlist(targets.P))
# Build the matrix wth the necessary data for all the species in the prior knowledge
dataMatrix <- buildDataMatrix(dataGMM = dataGMM, pknList = pknList, targets = targets, experiments = experiments)
targets <- targets.P
# Build the matrix wth the necessary data for all the species in the prior knowledge
dataMatrix <- buildDataMatrix(dataGMM = dataGMM, pknList = pknList, targets = targets, experiments = experiments)
# SIF file for the prior knowledge interactions
sif <- createSIF(pknList = pknList)
# Creating lists containing all our variables
binary_x <- create_binary_variables_for_x_vector(dataMatrix = dataMatrix)
binary_y <- create_binary_variables_for_y_vector(pknList = pknList)
binary_z <- create_binary_variables_for_z_vector(pknList = pknList, dataMatrix = dataMatrix)
binary_orin_orout <- create_orin_orout_variables(dataMatrix = dataMatrix, targets = targets)
# Running PHONEMeS - cplex
# Run PHONEMeS with multiple solutions from CPLEX
source("../../../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "no")
rm(list = ls())
# Load packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(dplyr)
# Call the PHONEMeS functions
source("../../../Public/buildDataMatrix.R")
source("../../../Public/ilpFunctions.R")
source("../../../Public/buildDataObject.R")
source("../../../Public/build_Nw.R")
source("../../../Public/build_PKN.R")
# Loading database and dat-object
load(file='allD_noCSK_filt.RData')
load(file='dataObjects_PHONEMeS.RData')
#Make the data objects that will be needed
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
dataGMM<-new("GMMres", res=GMM.res.noFC, IDmap=GMM.res.ID, resFC=GMM.res)
conditions <- list(c("AKT1 - Control", "AKT2 - Control"), c("CAMK1 - Control", "CAMK2 - Control"),
c("EGFR1 - Control", "EGFR2 - Control"), c("ERK1 - Control", "ERK2 - Control"),
c("MEK1 - Control", "MEK2 - Control"), c("MTOR1 - Control", "MTOR2 - Control"),
c("P70S6K1 - Control", "P70S6K2 - Control"), c("PI3K1 - Control", "PI3K2 - Control"),
c("PKC1 - Control", "PKC2 - Control"), c("ROCK1 - Control", "ROCK2 - Control"))
names(conditions) <- c("AKT1_HUMAN", "KCC2D_HUMAN", "EGFR_HUMAN", "MK01_HUMAN",
"MP2K1_HUMAN", "MTOR_HUMAN",  "KS6B1_HUMAN", "PK3CA_HUMAN",
"KPCA_HUMAN", "ROCK1_HUMAN")
targets.P<-list(cond1=c("AKT1_HUMAN", "AKT2_HUMAN"), cond2=c(), cond3=c(), cond4=c(),
cond5=c(), cond6=c("MTOR_HUMAN"), cond7=c(), cond8=c("PK3CA_HUMAN", "PK3CD_HUMAN", "MTOR_HUMAN"),
cond9=c(), cond10=c())
# Select experimental condition
experiments <- c(6) # for MTORi case
# Running PHONEMeS - cplex
# Run PHONEMeS with multiple solutions from CPLEX
source("../../../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "no")
write.table(x = resultsMulti, file = "MTORi_sif_cplex.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
View(resultsMulti)
resultsMulti[, 2]
write.table(x = resultsMulti[which(resultsMulti[, 2]>20), ], file = "MTORi_sif_cplex_cutoff20.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
# Run PHONEMeS with multiple solutions from Downsampling
source("../../../Public/runPHONEMeS_Downsampling.R")
resultsSampling <- runPHONEMeS_Downsampling(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nIter = 100, nK = "no")
getwd()
rm(list = ls())
# Load packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(dplyr)
# Call the PHONEMeS functions
source("../../../Public/buildDataMatrix.R")
source("../../../Public/ilpFunctions.R")
source("../../../Public/buildDataObject.R")
source("../../../Public/build_Nw.R")
source("../../../Public/build_PKN.R")
# Loading database and dat-object
load(file='allD_noCSK_filt.RData')
load(file='dataObjects_PHONEMeS.RData')
#Make the data objects that will be needed
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
dataGMM<-new("GMMres", res=GMM.res.noFC, IDmap=GMM.res.ID, resFC=GMM.res)
conditions <- list(c("AKT1 - Control", "AKT2 - Control"), c("CAMK1 - Control", "CAMK2 - Control"),
c("EGFR1 - Control", "EGFR2 - Control"), c("ERK1 - Control", "ERK2 - Control"),
c("MEK1 - Control", "MEK2 - Control"), c("MTOR1 - Control", "MTOR2 - Control"),
c("P70S6K1 - Control", "P70S6K2 - Control"), c("PI3K1 - Control", "PI3K2 - Control"),
c("PKC1 - Control", "PKC2 - Control"), c("ROCK1 - Control", "ROCK2 - Control"))
names(conditions) <- c("AKT1_HUMAN", "KCC2D_HUMAN", "EGFR_HUMAN", "MK01_HUMAN",
"MP2K1_HUMAN", "MTOR_HUMAN",  "KS6B1_HUMAN", "PK3CA_HUMAN",
"KPCA_HUMAN", "ROCK1_HUMAN")
targets.P<-list(cond1=c("AKT1_HUMAN", "AKT2_HUMAN"), cond2=c(), cond3=c(), cond4=c(),
cond5=c(), cond6=c("MTOR_HUMAN"), cond7=c(), cond8=c("PK3CA_HUMAN", "PK3CD_HUMAN", "MTOR_HUMAN"),
cond9=c(), cond10=c())
# Select experimental condition
experiments <- c(6) # for MTORi case
# Running PHONEMeS - cplex
# Run PHONEMeS with multiple solutions from CPLEX
source("../../../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "no")
write.table(x = resultsMulti, file = "MTORi_sif_cplex.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(x = resultsMulti[which(resultsMulti[, 2]>70), ], file = "MTORi_sif_cplex_cutoff70.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
# Run PHONEMeS with multiple solutions from Downsampling
source("../../../Public/runPHONEMeS_Downsampling.R")
resultsSampling <- runPHONEMeS_Downsampling(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nIter = 100, nK = "no")
write.table(x = resultsSampling, file = "MTORi_sif_sampling.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(x = resultsSampling[which(resultsSampling[, 2]>20), ], file = "MTORi_sif_sampling_cutoff20.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
# Assign nodes attributes for nicer visualization in cytoscape
source("../../../Public/assignAttributes.R")
nodesAttributes <- assignAttributes(sif = resultsSampling, dataGMM = dataGMM, targets = targets.P[experiments], writeAttr = TRUE)
write.table(x = resultsMulti[which(resultsMulti[, 2]>=50), ], file = "MTORi_sif_cplex_cutoff50.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(x = resultsMulti[which(resultsMulti[, 2]>=50), ], file = "MTORi_sif_cplex_cutoff50.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
resultsSampling <- runPHONEMeS_Downsampling(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nIter = 300, nK = "no")
rm(list = ls())
# Load packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(dplyr)
# Call the PHONEMeS functions
source("../../../Public/buildDataMatrix.R")
source("../../../Public/ilpFunctions.R")
source("../../../Public/buildDataObject.R")
source("../../../Public/build_Nw.R")
source("../../../Public/build_PKN.R")
# Loading database and dat-object
load(file='allD_noCSK_filt.RData')
load(file='dataObjects_PHONEMeS.RData')
#Make the data objects that will be needed
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
dataGMM<-new("GMMres", res=GMM.res.noFC, IDmap=GMM.res.ID, resFC=GMM.res)
conditions <- list(c("AKT1 - Control", "AKT2 - Control"), c("CAMK1 - Control", "CAMK2 - Control"),
c("EGFR1 - Control", "EGFR2 - Control"), c("ERK1 - Control", "ERK2 - Control"),
c("MEK1 - Control", "MEK2 - Control"), c("MTOR1 - Control", "MTOR2 - Control"),
c("P70S6K1 - Control", "P70S6K2 - Control"), c("PI3K1 - Control", "PI3K2 - Control"),
c("PKC1 - Control", "PKC2 - Control"), c("ROCK1 - Control", "ROCK2 - Control"))
names(conditions) <- c("AKT1_HUMAN", "KCC2D_HUMAN", "EGFR_HUMAN", "MK01_HUMAN",
"MP2K1_HUMAN", "MTOR_HUMAN",  "KS6B1_HUMAN", "PK3CA_HUMAN",
"KPCA_HUMAN", "ROCK1_HUMAN")
targets.P<-list(cond1=c("AKT1_HUMAN", "AKT2_HUMAN"), cond2=c(), cond3=c(), cond4=c(),
cond5=c(), cond6=c("MTOR_HUMAN"), cond7=c(), cond8=c("PK3CA_HUMAN", "PK3CD_HUMAN", "MTOR_HUMAN"),
cond9=c(), cond10=c())
# Select experimental condition
experiments <- c(6) # for MTORi case
# Running PHONEMeS - cplex
# Run PHONEMeS with multiple solutions from CPLEX
source("../../../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "no")
write.table(x = resultsMulti, file = "MTORi_sif_cplex.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(x = resultsMulti[which(resultsMulti[, 2]>=50), ], file = "MTORi_sif_cplex_cutoff50.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
# Run PHONEMeS with multiple solutions from Downsampling
source("../../../Public/runPHONEMeS_Downsampling.R")
resultsSampling <- runPHONEMeS_Downsampling(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nIter = 300, nK = "no")
rm(list = ls())
# Load packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(dplyr)
# Call the PHONEMeS functions
source("../../../Public/buildDataMatrix.R")
source("../../../Public/ilpFunctions.R")
source("../../../Public/buildDataObject.R")
source("../../../Public/build_Nw.R")
source("../../../Public/build_PKN.R")
# Loading database and dat-object
load(file='allD_noCSK_filt.RData')
load(file='dataObjects_PHONEMeS.RData')
#Make the data objects that will be needed
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
dataGMM<-new("GMMres", res=GMM.res.noFC, IDmap=GMM.res.ID, resFC=GMM.res)
conditions <- list(c("AKT1 - Control", "AKT2 - Control"), c("CAMK1 - Control", "CAMK2 - Control"),
c("EGFR1 - Control", "EGFR2 - Control"), c("ERK1 - Control", "ERK2 - Control"),
c("MEK1 - Control", "MEK2 - Control"), c("MTOR1 - Control", "MTOR2 - Control"),
c("P70S6K1 - Control", "P70S6K2 - Control"), c("PI3K1 - Control", "PI3K2 - Control"),
c("PKC1 - Control", "PKC2 - Control"), c("ROCK1 - Control", "ROCK2 - Control"))
names(conditions) <- c("AKT1_HUMAN", "KCC2D_HUMAN", "EGFR_HUMAN", "MK01_HUMAN",
"MP2K1_HUMAN", "MTOR_HUMAN",  "KS6B1_HUMAN", "PK3CA_HUMAN",
"KPCA_HUMAN", "ROCK1_HUMAN")
targets.P<-list(cond1=c("AKT1_HUMAN", "AKT2_HUMAN"), cond2=c(), cond3=c(), cond4=c(),
cond5=c(), cond6=c("MTOR_HUMAN"), cond7=c(), cond8=c("PK3CA_HUMAN", "PK3CD_HUMAN", "MTOR_HUMAN"),
cond9=c(), cond10=c())
# Select experimental condition
experiments <- c(6) # for MTORi case
# Running PHONEMeS - cplex
# Run PHONEMeS with multiple solutions from CPLEX
source("../../../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "no")
write.table(x = resultsMulti, file = "MTORi_sif_cplex.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(x = resultsMulti[which(resultsMulti[, 2]>=2), ], file = "MTORi_sif_cplex_cutoff2.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
# Run PHONEMeS with multiple solutions from Downsampling
source("../../../Public/runPHONEMeS_Downsampling.R")
resultsSampling <- runPHONEMeS_Downsampling(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nIter = 100, nK = "no")
write.table(x = resultsSampling, file = "MTORi_sif_sampling.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(x = resultsSampling[which(resultsSampling[, 2]>20), ], file = "MTORi_sif_sampling_cutoff20.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(x = resultsSampling[which(resultsSampling[, 2]>25), ], file = "MTORi_sif_sampling_cutoff25.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
# Assign nodes attributes for nicer visualization in cytoscape
source("../../../Public/assignAttributes.R")
nodesAttributes <- assignAttributes(sif = resultsSampling, dataGMM = dataGMM, targets = targets.P[experiments], writeAttr = TRUE)
View(allD)
View(GMM.res.ID)
GMM.res$`GSK3B p-S9 (z= 2)`
GMM.res$`GSK3B p-S9 (z= 3)`
rm(list = ls())
# Load packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(dplyr)
# Call the PHONEMeS functions
source("../../../Public/buildDataMatrix.R")
source("../../../Public/ilpFunctions.R")
source("../../../Public/buildDataObject.R")
source("../../../Public/build_Nw.R")
source("../../../Public/build_PKN.R")
# Loading database and dat-object
load(file='allD_noCSK_filt.RData')
load(file='dataObjects_PHONEMeS.RData')
#Make the data objects that will be needed
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
dataGMM<-new("GMMres", res=GMM.res.noFC, IDmap=GMM.res.ID, resFC=GMM.res)
conditions <- list(c("AKT1 - Control", "AKT2 - Control"), c("CAMK1 - Control", "CAMK2 - Control"),
c("EGFR1 - Control", "EGFR2 - Control"), c("ERK1 - Control", "ERK2 - Control"),
c("MEK1 - Control", "MEK2 - Control"), c("MTOR1 - Control", "MTOR2 - Control"),
c("P70S6K1 - Control", "P70S6K2 - Control"), c("PI3K1 - Control", "PI3K2 - Control"),
c("PKC1 - Control", "PKC2 - Control"), c("ROCK1 - Control", "ROCK2 - Control"))
names(conditions) <- c("AKT1_HUMAN", "KCC2D_HUMAN", "EGFR_HUMAN", "MK01_HUMAN",
"MP2K1_HUMAN", "MTOR_HUMAN",  "KS6B1_HUMAN", "PK3CA_HUMAN",
"KPCA_HUMAN", "ROCK1_HUMAN")
targets.P<-list(cond1=c("AKT1_HUMAN", "AKT2_HUMAN"), cond2=c(), cond3=c(), cond4=c(),
cond5=c(), cond6=c("MTOR_HUMAN"), cond7=c(), cond8=c("PK3CA_HUMAN", "PK3CD_HUMAN", "MTOR_HUMAN"),
cond9=c(), cond10=c())
# Select experimental condition
experiments <- c(6) # for MTORi case
# Running PHONEMeS - cplex
# Run PHONEMeS with multiple solutions from CPLEX
source("../../../Public/runPHONEMeS.R")
solver = "cplex"
nSolutions = 100
nK = "no"
conditions <- conditions[experiments]
valid_solver_list <- c("cplex", "cbc")
if (!(solver %in% valid_solver_list)){
stop(paste0("Select a valid solver option (", paste(valid_solver_list, collapse=", "), ")"))
}
data.P <- dataBycond(dataGMM, bg, scaled=TRUE, rowBycond=conditions)
show(data.P)
speciesP(data.P)
targets.P <- targets.P[experiments]
pknList<-build_Nw(data.On=data.P, targets.On=targets.P, bg=bg, nK=nK)
show(pknList)
TG <- unique(unlist(targets.P))
# Build the matrix wth the necessary data for all the species in the prior knowledge
dataMatrix <- buildDataMatrix(dataGMM = dataGMM, pknList = pknList, targets = targets, experiments = experiments)
targets <- targets.P
# Build the matrix wth the necessary data for all the species in the prior knowledge
dataMatrix <- buildDataMatrix(dataGMM = dataGMM, pknList = pknList, targets = targets, experiments = experiments)
dataMatrix$dataMatrix
kk <- pknList@interactions
View(kk)
GMM.res$`GSK3B p-S9 (z= 2)`
TG <- unlist(unique(targets))
sites <- intersect(pknList@species, dataGMM@IDmap$S.cc)
idxTG <- list()
idxDN <- list()
idxDS <- list()
dataMatrix <- matrix(data = 0, nrow = length(experiments), ncol = length(pknList@species))
cNames <- unique(c(TG, setdiff(pknList@species, c(TG, sites)), sites))
idx <- which(cNames%in%sites)
for(ii in 1:length(experiments)){
idxDS[[length(idxDS)+1]] <- idx
}
idxDS
cNames[setdiff(1:length(cNames), idx)] <- paste0("DN:", cNames[setdiff(1:length(cNames), idx)])
cNames[idx] <- paste0("DS:", cNames[idx])
cNames
colnames(dataMatrix) <- cNames
sites
ii <- 2
ii <- 1
kk <- 2
nn <- dataGMM@IDmap$dataID[which(dataGMM@IDmap$S.cc==sites[kk])]
nn
idxMeas <- which(names(dataGMM@res)==nn)
idxMeas
idxMeas <- which(names(dataGMM@res)%in%nn)
idxMeas
TG <- unlist(unique(targets))
sites <- intersect(pknList@species, dataGMM@IDmap$S.cc)
idxTG <- list()
idxDN <- list()
idxDS <- list()
dataMatrix <- matrix(data = 0, nrow = length(experiments), ncol = length(pknList@species))
cNames <- unique(c(TG, setdiff(pknList@species, c(TG, sites)), sites))
idx <- which(cNames%in%sites)
for(ii in 1:length(experiments)){
idxDS[[length(idxDS)+1]] <- idx
}
cNames[setdiff(1:length(cNames), idx)] <- paste0("DN:", cNames[setdiff(1:length(cNames), idx)])
cNames[idx] <- paste0("DS:", cNames[idx])
colnames(dataMatrix) <- cNames
for(ii in 1:nrow(dataMatrix)){
cc <- conditions[[ii]]
for(kk in 1:length(sites)){
nn <- dataGMM@IDmap$dataID[which(dataGMM@IDmap$S.cc==sites[kk])]
idxMeas <- which(names(dataGMM@res)%in%nn)
if(length(idxMeas) > 0){
score <- min(as.numeric(dataGMM@res[idxMeas][[1]][which(rownames(dataGMM@res[idxMeas][[1]])%in%cc), 1]))
dataMatrix[ii, which(cNames==paste0("DS:", sites[kk]))] <- score
}
}
}
dataMatrix
rm(list = ls())
# Load packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(dplyr)
# Call the PHONEMeS functions
source("../../../Public/buildDataMatrix.R")
source("../../../Public/ilpFunctions.R")
source("../../../Public/buildDataObject.R")
source("../../../Public/build_Nw.R")
source("../../../Public/build_PKN.R")
# Loading database and dat-object
load(file='allD_noCSK_filt.RData')
load(file='dataObjects_PHONEMeS.RData')
#Make the data objects that will be needed
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
dataGMM<-new("GMMres", res=GMM.res.noFC, IDmap=GMM.res.ID, resFC=GMM.res)
conditions <- list(c("AKT1 - Control", "AKT2 - Control"), c("CAMK1 - Control", "CAMK2 - Control"),
c("EGFR1 - Control", "EGFR2 - Control"), c("ERK1 - Control", "ERK2 - Control"),
c("MEK1 - Control", "MEK2 - Control"), c("MTOR1 - Control", "MTOR2 - Control"),
c("P70S6K1 - Control", "P70S6K2 - Control"), c("PI3K1 - Control", "PI3K2 - Control"),
c("PKC1 - Control", "PKC2 - Control"), c("ROCK1 - Control", "ROCK2 - Control"))
names(conditions) <- c("AKT1_HUMAN", "KCC2D_HUMAN", "EGFR_HUMAN", "MK01_HUMAN",
"MP2K1_HUMAN", "MTOR_HUMAN",  "KS6B1_HUMAN", "PK3CA_HUMAN",
"KPCA_HUMAN", "ROCK1_HUMAN")
targets.P<-list(cond1=c("AKT1_HUMAN", "AKT2_HUMAN"), cond2=c(), cond3=c(), cond4=c(),
cond5=c(), cond6=c("MTOR_HUMAN"), cond7=c(), cond8=c("PK3CA_HUMAN", "PK3CD_HUMAN", "MTOR_HUMAN"),
cond9=c(), cond10=c())
# Select experimental condition
experiments <- c(6) # for MTORi case
# Running PHONEMeS - cplex
# Run PHONEMeS with multiple solutions from CPLEX
source("../../../Public/runPHONEMeS.R")
resultsMulti <- runPHONEMeS(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nSolutions = 100, nK = "no")
write.table(x = resultsMulti, file = "MTORi_sif_cplex.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
# Run PHONEMeS with multiple solutions from Downsampling
source("../../../Public/runPHONEMeS_Downsampling.R")
resultsSampling <- runPHONEMeS_Downsampling(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, solver = "cplex", nIter = 100, nK = "no")
write.table(x = resultsSampling, file = "MTORi_sif_sampling.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(x = resultsSampling[which(resultsSampling[, 2]>25), ], file = "MTORi_sif_sampling_cutoff25.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
