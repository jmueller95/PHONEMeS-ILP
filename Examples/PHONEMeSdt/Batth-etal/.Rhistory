toBind[i, 2] <- strsplit(x = uniprot$`Gene names`[which(uniprot$Entry==toBind[i, 1])], split = " ", fixed = TRUE)[[1]][1]
} else {
toBind[i, 2] <- toBind[i, 1]
}
}
View(mappingTable)
mappingTable <- rbind(mappingTable, toBind)
mappingTable[which(is.na(mappingTable[, 2])), 2] <- mappingTable[which(is.na(mappingTable[, 2])), 1]
View(mappingTable)
##
# Adding kinase/phosphatase-substrate interactions
BN <- matrix(data = , nrow = nrow(KSN_mouse_uniprot), ncol = 8)
colnames(BN) <- c("S.AC", "S.ID", "K.AC", "K.ID", "res", "pos", "SID", "S.cc")
cnt <- 1
for(i in 1:nrow(KSN_mouse_uniprot)){
BN[i, 1] <- KSN_mouse_uniprot$substrate[i]
if(length(which(mappingTable[, 1]==KSN_mouse_uniprot$substrate[i])) > 0){
BN[i, 2] <- toupper(mappingTable[which(mappingTable[, 1]==KSN_mouse_uniprot$substrate[i]), 2])
} else { BN[i, 2] <- BN[i, 1] }
BN[i, 3] <- KSN_mouse_uniprot$enzyme[i]
if(length(which(mappingTable[, 1]==KSN_mouse_uniprot$enzyme[i])) > 0){
BN[i, 4] <- toupper(mappingTable[which(mappingTable[, 1]==KSN_mouse_uniprot$enzyme[i]), 2])
} else { BN[i, 4] <- BN[i, 3] }
BN[i, 5] <- KSN_mouse_uniprot$residue[i]
BN[i, 6] <- KSN_mouse_uniprot$offset[i]
BN[i, 7] <- paste0("e", cnt)
cnt <- cnt + 1
BN[i, 8] <- paste0(BN[i, 2], "_", BN[i, 5], BN[i, 6])
}
BN1 <- BN
rm(list = ls())
getwd()
setwd("/Users/enio.gjerga/Documents/GitHub/PHONEMeS-ILP/Examples/PHONEMeSdt/Batth-etal/Background-Network/")
library(readr)
KSN_mouse_uniprot <- read_delim("KSN_mouse_uniprot", "\t", escape_double = FALSE, trim_ws = TRUE)
omnipath_mouse <- read_delim("omnipath_mouse", "\t", escape_double = FALSE, trim_ws = TRUE)
mappingTable <- matrix(data = , nrow = 2*nrow(omnipath_mouse), ncol = 2)
colnames(mappingTable) <- c("Uniprot", "Gene")
mappingTable[, 1] <- c(omnipath_mouse$UniProt_A, omnipath_mouse$UniProt_B)
mappingTable[, 2] <- c(omnipath_mouse$GeneSymbol_A, omnipath_mouse$GeneSymbol_B)
mappingTable <- unique(mappingTable)
speciesKSN <- unique(c(KSN_mouse_uniprot$enzyme, KSN_mouse_uniprot$substrate))
idx <- which(speciesKSN%in%mappingTable[, 1])
speciesKSN <- speciesKSN[-idx]
write.table(x = as.matrix(speciesKSN), file = "toUniprot.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = FALSE) # map uniprot identifiers to gene ID's and save the mapping table locally
toBind <- matrix(data = , nrow = length(speciesKSN), ncol = 2)
colnames(toBind) <- c("Uniprot", "Gene")
toBind[, 1] <- speciesKSN
uniprot <- read_delim("uniprot", "\t", escape_double = FALSE, trim_ws = TRUE)
for(i in 1:nrow(toBind)){
if(length(which(uniprot$Entry==toBind[i, 1])) > 0){
toBind[i, 2] <- strsplit(x = uniprot$`Gene names`[which(uniprot$Entry==toBind[i, 1])], split = " ", fixed = TRUE)[[1]][1]
} else {
toBind[i, 2] <- toBind[i, 1]
}
}
mappingTable <- rbind(mappingTable, toBind)
mappingTable[which(is.na(mappingTable[, 2])), 2] <- mappingTable[which(is.na(mappingTable[, 2])), 1]
##
# Adding kinase/phosphatase-substrate interactions
BN <- matrix(data = , nrow = nrow(KSN_mouse_uniprot), ncol = 8)
colnames(BN) <- c("S.AC", "S.ID", "K.AC", "K.ID", "res", "pos", "SID", "S.cc")
cnt <- 1
for(i in 1:nrow(KSN_mouse_uniprot)){
BN[i, 1] <- KSN_mouse_uniprot$substrate[i]
if(length(which(mappingTable[, 1]==KSN_mouse_uniprot$substrate[i])) > 0){
BN[i, 2] <- toupper(mappingTable[which(mappingTable[, 1]==KSN_mouse_uniprot$substrate[i]), 2])
} else { BN[i, 2] <- BN[i, 1] }
BN[i, 3] <- KSN_mouse_uniprot$enzyme[i]
if(length(which(mappingTable[, 1]==KSN_mouse_uniprot$enzyme[i])) > 0){
BN[i, 4] <- toupper(mappingTable[which(mappingTable[, 1]==KSN_mouse_uniprot$enzyme[i]), 2])
} else { BN[i, 4] <- BN[i, 3] }
BN[i, 5] <- KSN_mouse_uniprot$residue[i]
BN[i, 6] <- KSN_mouse_uniprot$offset[i]
BN[i, 7] <- paste0("e", cnt)
cnt <- cnt + 1
BN[i, 8] <- paste0(BN[i, 2], "_", BN[i, 5], BN[i, 6])
}
BN1 <- BN
# ##
# # Adding the signed and directed interactions from uniprot
# BN <- matrix(data = , nrow = nrow(omnipath_mouse), ncol = 8)
# colnames(BN) <- c("S.AC", "S.ID", "K.AC", "K.ID", "res", "pos", "SID", "S.cc")
#
# for(i in 1:nrow(omnipath_mouse)){
#
#   BN[i, 1] <- omnipath_mouse$UniProt_B[i]
#   BN[i, 2] <- toupper(omnipath_mouse$GeneSymbol_B[i])
#   BN[i, 3] <- omnipath_mouse$UniProt_A[i]
#   BN[i, 4] <- toupper(omnipath_mouse$GeneSymbol_A[i])
#   BN[i, 5] <- "R"
#   BN[i, 6] <- "1"
#   BN[i, 7] <- paste0("e", cnt)
#   cnt <- cnt + 1
#   BN[i, 8] <- paste0(BN[i, 2], "_R1")
#
# }
#
# BN2 <- BN
#
# ##
# BN <- rbind(BN1, BN2)
##
# add igfr1 from string interactions
string_interactions_igf1r <- read_delim("string_interactions_igf1r.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
interactions <- string_interactions_igf1r[which(string_interactions_igf1r$node2=="Igf1r"), ]
interactions$`#node1`[which(interactions$`#node1`=="Hras1")] <- "Hras"
for(i in 1:nrow(interactions)){
if((i%in%c(2, 4)) == FALSE){
cc1 <- as.character(mappingTable[which(mappingTable[, 2]==interactions$`#node1`[i]), 1])
cc2 <- toupper(interactions$`#node1`[i])
cc3 <- as.character(mappingTable[which(mappingTable[, 2]==interactions$node2[i]), 1])
cc4 <- toupper(interactions$node2[i])
cc5 <- "R"
cc6 <- "1"
cc7 <- paste0("e", cnt)
cnt <- cnt + 1
cc8 <- paste0(cc2, "_R1")
toBind <- as.data.frame(t(as.matrix(c(cc1, cc2, cc3, cc4, cc5, cc6, cc7, cc8))))
colnames(toBind) <- colnames(BN)
BN <- rbind(BN, toBind)
}
}
interactions <- string_interactions_igf1r[which(string_interactions_igf1r$`#node1`=="Igf1r"), ]
for(i in 1:nrow(interactions)){
cc1 <- as.character(mappingTable[which(mappingTable[, 2]==interactions$node2[i]), 1])
cc2 <- toupper(interactions$node2[i])
cc3 <- as.character(mappingTable[which(mappingTable[, 2]==interactions$`#node1`[i]), 1])
cc4 <- toupper(interactions$`#node1`[i])
cc5 <- "R"
cc6 <- "1"
cc7 <- paste0("e", cnt)
cnt <- cnt + 1
cc8 <- paste0(cc2, "_R1")
toBind <- as.data.frame(t(as.matrix(c(cc1, cc2, cc3, cc4, cc5, cc6, cc7, cc8))))
colnames(toBind) <- colnames(BN)
BN <- rbind(BN, toBind)
}
##
# add fgfr1 from string interactions
string_interactions_fgfr1 <- read_delim("string_interactions_fgfr1.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
interactions <- string_interactions_fgfr1[which(string_interactions_fgfr1$`#node1`=="Fgfr1"), ]
interactions$node2[which(interactions$node2=="Hras1")] <- "Hras"
for(i in 1:nrow(interactions)){
if(i!=1){
cc1 <- as.character(mappingTable[which(mappingTable[, 2]==interactions$node2[i]), 1])
cc2 <- toupper(interactions$node2[i])
cc3 <- as.character(mappingTable[which(mappingTable[, 2]==interactions$`#node1`[i]), 1])
cc4 <- toupper(interactions$`#node1`[i])
cc5 <- "R"
cc6 <- "1"
cc7 <- paste0("e", cnt)
cnt <- cnt + 1
cc8 <- paste0(cc2, "_R1")
toBind <- as.data.frame(t(as.matrix(c(cc1, cc2, cc3, cc4, cc5, cc6, cc7, cc8))))
colnames(toBind) <- colnames(BN)
BN <- rbind(BN, toBind)
}
}
##
# add pdgfra from string interactions
string_interactions_pdgfra <- read_delim("string_interactions_pdgfra.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
interactions <- string_interactions_pdgfra[which(string_interactions_pdgfra$node2=="Pdgfra"), ]
interactions$`#node1`[which(interactions$`#node1`=="Hras1")] <- "Hras"
for(i in 1:nrow(interactions)){
if((i%in%c(1, 2, 6, 10)) == FALSE){
cc1 <- as.character(mappingTable[which(mappingTable[, 2]==interactions$`#node1`[i]), 1])
cc2 <- toupper(interactions$`#node1`[i])
cc3 <- as.character(mappingTable[which(mappingTable[, 2]==interactions$node2[i]), 1])
cc4 <- toupper(interactions$node2[i])
cc5 <- "R"
cc6 <- "1"
cc7 <- paste0("e", cnt)
cnt <- cnt + 1
cc8 <- paste0(cc2, "_R1")
toBind <- as.data.frame(t(as.matrix(c(cc1, cc2, cc3, cc4, cc5, cc6, cc7, cc8))))
colnames(toBind) <- colnames(BN)
BN <- rbind(BN, toBind)
}
}
##
# add pdgfrb from string interactions
string_interactions_pdgfrb <- read_delim("string_interactions_pdgfrb.tsv", "\t", escape_double = FALSE, trim_ws = TRUE)
interactions <- string_interactions_pdgfrb[which(string_interactions_pdgfrb$node2=="Pdgfrb"), ]
for(i in 1:nrow(interactions)){
if((i%in%c(6, 7, 8)) == FALSE){
cc1 <- as.character(mappingTable[which(mappingTable[, 2]==interactions$`#node1`[i]), 1])
cc2 <- toupper(interactions$`#node1`[i])
cc3 <- as.character(mappingTable[which(mappingTable[, 2]==interactions$node2[i]), 1])
cc4 <- toupper(interactions$node2[i])
cc5 <- "R"
cc6 <- "1"
cc7 <- paste0("e", cnt)
cnt <- cnt + 1
cc8 <- paste0(cc2, "_R1")
toBind <- as.data.frame(t(as.matrix(c(cc1, cc2, cc3, cc4, cc5, cc6, cc7, cc8))))
colnames(toBind) <- colnames(BN)
BN <- rbind(BN, toBind)
}
}
##
# Add PI3KCA -> AKT1 since it is not present as ppi
cc1 <- "P31750"
cc2 <- "AKT1"
cc3 <- "P42337"
cc4 <- "PIK3CA"
cc5 <- "R"
cc6 <- "1"
cc7 <- paste0("e", cnt)
cc8 <- "AKT1_R1"
toBind <- as.data.frame(t(as.matrix(c(cc1, cc2, cc3, cc4, cc5, cc6, cc7, cc8))))
colnames(toBind) <- colnames(BN)
BN <- rbind(BN, toBind)
BN <- as.data.frame(BN)
BN$S.AC <- as.character(BN$S.AC)
BN$S.ID <- as.character(BN$S.ID)
BN$K.AC <- as.character(BN$K.AC)
BN$K.ID <- as.character(BN$K.ID)
BN$res <- as.character(BN$res)
BN$pos <- as.character(BN$pos)
BN$SID <- as.character(BN$SID)
BN$S.cc <- as.character(BN$S.cc)
##
BN$S.ID[which(BN$S.ID=="PDGFRB")] <- "PDGFR"
BN$S.ID[which(BN$S.ID=="PDGFRA")] <- "PDGFR"
BN$K.ID[which(BN$K.ID=="PDGFRB")] <- "PDGFR"
BN$K.ID[which(BN$K.ID=="PDGFRA")] <- "PDGFR"
BN$S.cc[which(grepl(pattern = "PDGFR", x = BN$S.cc))] <- gsub(pattern = "PDGFRA", replacement = "PDGFR", fixed = TRUE, x = BN$S.cc[which(grepl(pattern = "PDGFR", x = BN$S.cc))])
BN$S.cc[which(grepl(pattern = "PDGFR", x = BN$S.cc))] <- gsub(pattern = "PDGFRB", replacement = "PDGFR", fixed = TRUE, x = BN$S.cc[which(grepl(pattern = "PDGFR", x = BN$S.cc))])
BN <- BN[-c(12260, 12257), ]
##
idx <- intersect(x = which(BN$S.ID=="IGF1R"), y = which(BN$K.ID=="IGF1R"))
BN <- BN[-idx, ]
idx <- intersect(x = which(BN$S.ID=="FGFR1"), y = which(BN$K.ID=="FGFR1"))
BN <- BN[-idx, ]
idx <- intersect(x = which(BN$S.ID=="PDGFR"), y = which(BN$K.ID=="PDGFR"))
BN <- BN[-idx, ]
save(BN, file = "allD_MOUSE.RData")
View(BN)
rm(list = ls())
getwd()
setwd("/Users/enio.gjerga/Documents/GitHub/PHONEMeS-ILP/Examples/PHONEMeSdt/Batth-etal/dataObject/")
nicettop <- function(ttop)
{
ttop$ID <- row.names(ttop)
ttop <- ttop[,c(7,1:6)]
return(ttop)
}
library(readr)
mmc2 <- as.data.frame(mmc2 <- read_delim("mmc2.csv", ";", escape_double = FALSE, locale = locale(decimal_mark = ",", grouping_mark = "."), trim_ws = TRUE))
View(mmc2)
mmc2$`Gene names` <- gsub("[;].*","",mmc2$`Gene names`)
mmc2$ID <- paste(mmc2$`Gene names`, mmc2$`Amino acid`, sep = "_")
mmc2$ID <- paste(mmc2$ID, mmc2$Position, sep = "")
mmc2$ID <- toupper(mmc2$ID)
# Taking only the measurements with their intensities
batches <- mmc2[,c(63, 1:44)]
View(batches)
library(dplyr)
batches <- batches %>% group_by(ID) %>% summarise_each(funs(sum(., na.rm = TRUE)))
batches <- as.data.frame(batches)
row.names(batches) <- batches$ID
batches <- batches[,-1]
batches[batches == 0] <- NA
batches <- batches[rowSums(is.na(batches)) != 44,]
View(batches)
targets <- as.data.frame(matrix(NA,nrow = 44, ncol = 2))
names(targets) <- c("sample","condition")
targets[c(1:7),2] <- "control"
targets[c(8:14),2] <- "3min_PDGF"
targets[c(15:20),2] <- "3min_IGF1"
targets[c(21:26),2] <- "3min_FGF2"
targets[c(27:31),2] <- "15min_PDGF"
targets[c(32:37),2] <- "15min_IGF1"
targets[c(38:44),2] <- "15min_FGF2"
targets
j <- 0
for (i in 1:7)
{
targets[i,1] <- paste(targets[i,2],i, sep = "_")
j <- j+1
}
for (i in 1:7)
{
targets[i+7,1] <- paste(targets[i+7,2],i, sep = "_")
j <- j+1
}
for (i in 1:6)
{
targets[i+14,1] <- paste(targets[i+14,2],i, sep = "_")
j <- j+1
}
for (i in 1:6)
{
targets[i+20,1] <- paste(targets[i+20,2],i, sep = "_")
j <- j+1
}
for (i in 1:5)
{
targets[i+26,1] <- paste(targets[i+26,2],i, sep = "_")
j <- j+1
}
for (i in 1:6)
{
targets[i+31,1] <- paste(targets[i+31,2],i, sep = "_")
j <- j+1
}
for (i in 1:7)
{
targets[i+37,1] <- paste(targets[i+37,2],i, sep = "_")
j <- j+1
}
targets
names(batches) <- targets$sample
View(batches)
library(vsn)
fit <- vsnMatrix(as.matrix(batches))
meanSdPlot(fit)
batches <- as.data.frame(predict(fit,as.matrix(batches)))
?vsnMatrix
View(fit)
fit@coefficients
print(unique(targets$condition))
source("../../../../Public/limmaWrapper.R")
View(batches)
source("../../../../Public/limmaWrapper.R")
targets
comparisons = list(c(2,-1),c(3,-1),c(4,-1),c(5,-1),c(6,-1),c(7,-1))
comparisons
limmaRes <- runLimma(measurements = batches, targets = targets, comparisons = list(c(2,-1),c(3,-1),c(4,-1),c(5,-1),c(6,-1),c(7,-1)))
limmaRes
limmaRes <- runLimma(measurements = batches, targets = targets, comparisons = list(c(2,-1),c(3,-1),c(4,-1),c(5,-1),c(6,-1),c(7,-1)))
ttop_list <- list()
ttop_PDGF_3min <- topTable(limmaRes[[1]], coef = 1, number = 33312-15792, adjust.method = "fdr")
ttop_list[[1]] <- nicettop(ttop_PDGF_3min)
ttop_IGF1_3min <- topTable(limmaRes[[1]], coef = 2, number = 33312-15792, adjust.method = "fdr")
ttop_list[[2]] <- nicettop(ttop_IGF1_3min)
ttop_FGF2_3min <- topTable(limmaRes[[1]], coef = 3, number = 33312-15792, adjust.method = "fdr")
ttop_list[[3]] <- nicettop(ttop_FGF2_3min)
ttop_PDGF_15min <- topTable(limmaRes[[1]], coef = 4, number = 33312-15792, adjust.method = "fdr")
ttop_list[[4]] <- nicettop(ttop_PDGF_15min)
ttop_IGF1_15min <- topTable(limmaRes[[1]], coef = 5, number = 33312-15792, adjust.method = "fdr")
ttop_list[[5]] <- nicettop(ttop_IGF1_15min)
ttop_FGF2_15min <- topTable(limmaRes[[1]], coef = 6, number = 33312-15792, adjust.method = "fdr")
ttop_list[[6]] <- nicettop(ttop_FGF2_15min)
?topTable
View(batches)
limmaRes[[1]]
limmaRes[[1]]$coefficients
limmaRes[[2]]$coefficients
limmaRes <- runLimma(measurements = batches, targets = targets, comparisons = list(c(2,-1),c(3,-1),c(4,-1),c(5,-1),c(6,-1),c(7,-1)))
kk <- limmaRes[[1]]$coefficients
View(kk)
View(batches)
which(all(is.na(batches)))
nrow(batches)
unique(rownames(batches))
length(unique(rownames(batches)))
33312/2
View(kk)
idx <- c()
for(ii in 1:nrow(kk)){if(all(is.na(kk[ii, ]))){idx <- c(idx, ii)}}
length(idx)
## Limma analysis of the data to estimate their regulation level and significance
nicettop <- function(ttop)
{
ttop$ID <- row.names(ttop)
ttop <- ttop[,c(7,1:6)]
return(ttop)
}
library(readr)
mmc2 <- as.data.frame(mmc2 <- read_delim("mmc2.csv", ";", escape_double = FALSE, locale = locale(decimal_mark = ",", grouping_mark = "."), trim_ws = TRUE))
mmc2$`Gene names` <- gsub("[;].*","",mmc2$`Gene names`)
mmc2$ID <- paste(mmc2$`Gene names`, mmc2$`Amino acid`, sep = "_")
mmc2$ID <- paste(mmc2$ID, mmc2$Position, sep = "")
mmc2$ID <- toupper(mmc2$ID)
# Taking only the measurements with their intensities
batches <- mmc2[,c(63, 1:44)]
library(dplyr)
batches <- batches %>% group_by(ID) %>% summarise_each(funs(sum(., na.rm = TRUE)))
batches <- as.data.frame(batches)
row.names(batches) <- batches$ID
batches <- batches[,-1]
batches[batches == 0] <- NA
batches <- batches[rowSums(is.na(batches)) != 44,]
targets <- as.data.frame(matrix(NA,nrow = 44, ncol = 2))
names(targets) <- c("sample","condition")
targets[c(1:7),2] <- "control"
targets[c(8:14),2] <- "3min_PDGF"
targets[c(15:20),2] <- "3min_IGF1"
targets[c(21:26),2] <- "3min_FGF2"
targets[c(27:31),2] <- "15min_PDGF"
targets[c(32:37),2] <- "15min_IGF1"
targets[c(38:44),2] <- "15min_FGF2"
j <- 0
for (i in 1:7)
{
targets[i,1] <- paste(targets[i,2],i, sep = "_")
j <- j+1
}
for (i in 1:7)
{
targets[i+7,1] <- paste(targets[i+7,2],i, sep = "_")
j <- j+1
}
for (i in 1:6)
{
targets[i+14,1] <- paste(targets[i+14,2],i, sep = "_")
j <- j+1
}
for (i in 1:6)
{
targets[i+20,1] <- paste(targets[i+20,2],i, sep = "_")
j <- j+1
}
for (i in 1:5)
{
targets[i+26,1] <- paste(targets[i+26,2],i, sep = "_")
j <- j+1
}
for (i in 1:6)
{
targets[i+31,1] <- paste(targets[i+31,2],i, sep = "_")
j <- j+1
}
for (i in 1:7)
{
targets[i+37,1] <- paste(targets[i+37,2],i, sep = "_")
j <- j+1
}
names(batches) <- targets$sample
library(vsn)
fit <- vsnMatrix(as.matrix(batches))
meanSdPlot(fit)
batches <- as.data.frame(predict(fit,as.matrix(batches)))
print(unique(targets$condition))
source("../../../../Public/limmaWrapper.R")
limmaRes <- runLimma(measurements = batches, targets = targets, comparisons = list(c(2,-1),c(3,-1),c(4,-1),c(5,-1),c(6,-1),c(7,-1)))
ttop_list <- list()
ttop_PDGF_3min <- topTable(limmaRes[[1]], coef = 1, number = 33312-15792, adjust.method = "fdr") # which is all NA's in the coefficients matrix
ttop_list[[1]] <- nicettop(ttop_PDGF_3min)
ttop_IGF1_3min <- topTable(limmaRes[[1]], coef = 2, number = 33312-15792, adjust.method = "fdr")
ttop_list[[2]] <- nicettop(ttop_IGF1_3min)
ttop_FGF2_3min <- topTable(limmaRes[[1]], coef = 3, number = 33312-15792, adjust.method = "fdr")
ttop_list[[3]] <- nicettop(ttop_FGF2_3min)
ttop_PDGF_15min <- topTable(limmaRes[[1]], coef = 4, number = 33312-15792, adjust.method = "fdr")
ttop_list[[4]] <- nicettop(ttop_PDGF_15min)
ttop_IGF1_15min <- topTable(limmaRes[[1]], coef = 5, number = 33312-15792, adjust.method = "fdr")
ttop_list[[5]] <- nicettop(ttop_IGF1_15min)
ttop_FGF2_15min <- topTable(limmaRes[[1]], coef = 6, number = 33312-15792, adjust.method = "fdr")
ttop_list[[6]] <- nicettop(ttop_FGF2_15min)
names(ttop_list) <- c("PDGF_3min", "IGF1_3min", "FGF2_3min", "PDGF_15min", "IGF1_15min", "FGF2_15min")
save(ttop_list, file = "ttop_list.RData")
View(ttop_FGF2_15min)
# Setting the parameters for the input
source("../../../../Public/buildInputs.R")
load(file = "ttop_list.RData")
# Highly regulated sites are considered as perturbed
idxFC = 2
idxPval = 6
idxID = 1
pThresh = rep(0.025, 6)
fcThresh = rep(2.5, 6)
namesConditions = c("3min_PDGF", "3min_IGF1", "3min_FGF2", "15min_PDGF", "15min_IGF1", "15min_FGF2")
inputs <- buildInputs(tableTopList = ttop_list, fcThresh = fcThresh, pThresh = pThresh, idxID = idxID, idxFC = idxFC, idxPval = idxPval, namesConditions = namesConditions)
rm(list = ls())
getwd()
setwd("/Users/enio.gjerga/Documents/GitHub/PHONEMeS-ILP/Examples/PHONEMeSdt/Batth-etal/")
#  Copyright (c) 2018 - RWTH Aachen University
#
#  File author(s): Enio Gjerga
#
#  Distributed under the GPLv3 License.
#  See accompanying file LICENSE.txt or copy at
#      http://www.gnu.org/licenses/gpl-3.0.html
#
#  email: enio.gjerga@gmai.com
#
##############################################################################
# 13:22 23/03/2018
# This script is used to produce the PHONEMeS Outputs by calling the functions
# which write the ILP formulation
#load the packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(CellNOptR)
library(tidyr)
library(dplyr)
# Call the PHONEMeS functions
source("../../../Public/buildDataMatrix.R")
source("../../../Public/ilpFunctions.R")
source("../../../Public/buildDataObject.R")
source("../../../Public/build_Nw.R")
source("../../../Public/build_PKN.R")
load(paste0(getwd(), "/dataObject/GMM.ID.RData"))
load(paste0(getwd(), "/dataObject/GMM.RData"))
load(paste0(getwd(), "/dataObject/GMM.wFC.RData"))
load(paste0(getwd(), "/Background-Network/allD_MOUSE.RData"))
allD <- BN
#Make the data objects that will be needed
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
dataGMM<-new("GMMres", res=GMM, IDmap=GMM.ID, resFC=GMM.wFC)
conditions <- list(c("3min_PDGF"), c("3min_IGF1"), c("3min_FGF2"), c("15min_PDGF"), c("15min_IGF1"), c("15min_FGF2"))
names(conditions) <- c("cond1_3min", "cond2_3min", "cond3_3min", "cnod1_15min", "cond2_15min", "cond3_15min")
targets.P <- list(cond1_3min=c("PDGFR"), cond2_3min=c("IGF1R"), cond3_3min=c("FGFR2"), cond1_15min=c("PDGFR"), cond2_15min=c("IGF1R"), cond3_15min=c("FGFR2"))
experiments <- list(tp1=c(1), tp2=c(4)) # pdgfr only
# experiments <- list(tp1=c(1, 2, 3), tp2=c(4, 5, 6)) # if you want to consider all the three conditions for each time-point then do: experiments <- list(tp1=c(1, 2, 3), tp2=c(4, 5, 6))
#Generating the networks
source("../../../Public/runPHONEMeS_dt.R")
tpSIF <- runPHONEMeS_dt(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, nIter = 100)
rm(list = ls())
