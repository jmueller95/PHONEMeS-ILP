dataMatrix$dataMatrix
dataMatrix$dataMatrixSign
kk <- dataMatrix$dataMatrixSign
View(kk)
variables <- create_variables(pknList = pknList, dataMatrix = dataMatrix)
variables$variables
variables$exp
bounds <- write_boundaries(variables = variables)
bounds
oF <- write_objective_function(variables = variables, alpha = 0.01, beta = 0.02)
oF
c0 <- write_constraints_objFunction(variables = variables, dataMatrix = dataMatrix)
c0
c1 <- write_constraints_1(variables = variables)
c1
c1[1]
variables$exp[which(variables$variables=="xb68011")]
variables$exp[which(variables$variables=="xb4511")]
View(pknList)
variables$exp[which(variables$variables=="xb68995")]
variables$exp[which(variables$variables=="xb6")]
c2 <- write_constraints_2(variables = variables)
c2
c3 <- write_constraints_3(variables = variables)
c3
c4 <- write_constraints_4(variables = variables)
c4
c5 <- write_constraints_5(variables = variables)
c5
c6 <- write_constraints_6(variables = variables, dataMatrix = dataMatrix)
c7 <- write_constraints_7(variables = variables, dataMatrix = dataMatrix)
rm(list = ls())
rm(list = ls())
rm(list = ls())
load("~/Desktop/ETH-Zurich/02-09-2017/fcAnalysis/tp_2min/Bootstrap/sifList.RData")
for(i in 1:length(sifList)){
if(i == 1){
allSIF <- sifList[[i]]
}
else{
allSIF <- rbind(allSIF, sifList[[i]])
}
}
View(allSIF)
allSIF <- unique(allSIF)
resultsSIF <- read_delim("~/Desktop/ETH-Zurich/02-09-2017/fcAnalysis/tp_2min/Bootstrap/resultsSIF.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
library(readr)
resultsSIF <- read_delim("~/Desktop/ETH-Zurich/02-09-2017/fcAnalysis/tp_2min/Bootstrap/resultsSIF.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(resultsSIF)
resultsSIF <- as.matrix(resultsSIF)
idx <- c()
for(i in 1:length(resultsSIF[, 3])){
source <- resultsSIF[i, 1]
target <- resultsSIF[i, 3]
if(length(which(allSIF[, 3]==target)) > 1){
idx <- c(idx, i)
}
}
percentageList <- list()
idx
for(ii in 1:length(idx)){
source <- resultsSIF[idx[ii], 1]
target <- resultsSIF[idx[ii], 3]
sum <- 0
perc <- 0
for(jj in 1:length(sifList)){
if(target %in% sifList[[jj]][, 3]){
sum <- sum + 1
if(sifList[[jj]][which(sifList[[jj]][, 3]==target), 1]==source){
perc <- perc + 1
}
}
}
percentageList[[length(percentageList)+1]] <- (perc/sum)*100
}
percentageList
names(percentageList) <- resultsSIF[idx, 3]
percentageList
percentageSIF <- matrix(, nrow = nrow(resultsSIF), ncol = 4)
percentageSIF[, 1] <- resultsSIF[, 1]
percentageSIF[, 2] <- resultsSIF[, 3]
percentageSIF[, 3] <- "100%"
View(percentageSIF)
for(i in 1:length(idx)){
percentageSIF[idx[i], 3] <- paste0(percentageList[[i]], "%")
percentageSIF[idx[i], 4] <- paste0(percentageList[[i]])
}
View(percentageSIF)
percentageSIF[which(is.na(percentageSIF[, 4])), 4] <- 100
colnames(percentageSIF) <- c("Source", "Target", "Frequency", "Width")
load("~/Desktop/ETH-Zurich/02-09-2017/fcAnalysis/tp_2min/Bootstrap/sifList.RData")
for(i in 1:length(sifList)){
if(i == 1){
allSIF <- sifList[[i]]
}
else{
allSIF <- rbind(allSIF, sifList[[i]])
}
}
View(allSIF)
getwd()
load("~/Desktop/ETH-Zurich/02-09-2017/qAnalysis/tp_60min/Bootstrap/sifList.RData")
for(i in 1:length(sifList)){
if(i == 1){
allSIF <- sifList[[i]]
}
else{
allSIF <- rbind(allSIF, sifList[[i]])
}
}
View(allSIF)
kk <- which(allSIF[, 3]=="MK01_HUMAN")
kk
allSIF[kk, ]
rm(list = ls())
load("~/Desktop/ETH-Zurich/02-09-2017/qAnalysis/tp_60min/Bootstrap/sifList.RData")
for(i in 1:length(sifList)){
if(i == 1){
allSIF <- sifList[[i]]
}
else{
allSIF <- rbind(allSIF, sifList[[i]])
}
}
allSIF <- unique(allSIF)
library(readr)
resultsSIF <- read_delim("~/Desktop/ETH-Zurich/02-09-2017/fcAnalysis/tp_2min/Bootstrap/resultsSIF.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
resultsSIF <- as.matrix(resultsSIF)
idx <- c()
for(i in 1:length(resultsSIF[, 3])){
source <- resultsSIF[i, 1]
target <- resultsSIF[i, 3]
if(length(which(allSIF[, 3]==target)) > 1){
idx <- c(idx, i)
}
}
percentageList <- list()
for(ii in 1:length(idx)){
source <- resultsSIF[idx[ii], 1]
target <- resultsSIF[idx[ii], 3]
sum <- 0
perc <- 0
for(jj in 1:length(sifList)){
if(target %in% sifList[[jj]][, 3]){
sum <- sum + 1
if(sifList[[jj]][which(sifList[[jj]][, 3]==target), 1]==source){
perc <- perc + 1
}
}
}
percentageList[[length(percentageList)+1]] <- (perc/sum)*100
}
names(percentageList) <- resultsSIF[idx, 3]
percentageSIF <- matrix(, nrow = nrow(resultsSIF), ncol = 4)
percentageSIF[, 1] <- resultsSIF[, 1]
percentageSIF[, 2] <- resultsSIF[, 3]
percentageSIF[, 3] <- "100%"
for(i in 1:length(idx)){
percentageSIF[idx[i], 3] <- paste0(percentageList[[i]], "%")
percentageSIF[idx[i], 4] <- paste0(percentageList[[i]])
}
percentageSIF[which(is.na(percentageSIF[, 4])), 4] <- 100
colnames(percentageSIF) <- c("Source", "Target", "Frequency", "Width")
write.table(percentageSIF, file = "interactionFrequencies_Reduced_2min.txt", quote = FALSE, row.names = FALSE, sep = "\t")
##
resultsSIF1 <- read_delim("~/Desktop/ETH-Zurich/02-09-2017/fcAnalysis/tp_2min/Bootstrap/resultsSIF1.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
resultsSIF1 <- as.matrix(resultsSIF1)
idx <- c()
for(i in 1:length(resultsSIF1[, 3])){
source <- resultsSIF1[i, 1]
target <- resultsSIF1[i, 3]
if(length(which(allSIF[, 3]==target)) > 1){
idx <- c(idx, i)
}
}
uTargets <- unique(resultsSIF1[idx, 3])
percentageList <- list()
for(i in 1:length(uTargets)){
temp <- c()
target <- uTargets[i]
kk <- which(resultsSIF1[, 3]==uTargets[i])
for(j in 1:length(kk)){
source <- resultsSIF1[kk[j], 1]
sum <- 0
perc <- 0
for(s in 1:length(sifList)){
if(target %in% sifList[[s]][, 3]){
sum <- sum+1
if(sifList[[s]][which(sifList[[s]][, 3]==target), 1]==source){
perc <- perc + 1
}
}
}
temp <- c(temp, (perc/sum)*100)
}
names(temp) <- resultsSIF1[kk, 1]
percentageList[[length(percentageList)+1]] <- temp
}
names(percentageList) <- unique(resultsSIF1[idx, 3])
percentageSIF1 <- matrix(, nrow = nrow(resultsSIF1), ncol = 4)
percentageSIF1[, 1] <- resultsSIF1[, 1]
percentageSIF1[, 2] <- resultsSIF1[, 3]
percentageSIF1[, 3] <- "100%"
for(i in 1:length(percentageList)){
for(j in 1:length(percentageList[[i]])){
percentageSIF1[intersect(which(percentageSIF1[, 2]==names(percentageList)[i]), which(percentageSIF1[, 1]==names(percentageList[[i]])[j])), 3] <- paste0(percentageList[[i]][j], "%")
percentageSIF1[intersect(which(percentageSIF1[, 2]==names(percentageList)[i]), which(percentageSIF1[, 1]==names(percentageList[[i]])[j])), 4] <- paste0(percentageList[[i]][j])
}
}
percentageSIF1[which(is.na(percentageSIF1[, 4])), 4] <- 100
colnames(percentageSIF1) <- c("Source", "Target", "Frequency", "Width")
View(percentageSIF)
View(percentageSIF1)
which(allSIF[kk, 1]=="MK01_HUMAN_S29")
kk
kk <- which(allSIF[, 3]=="MK01_HUMAN")
kk
rm(list = ls())
load("~/Desktop/ETH-Zurich/02-09-2017/qAnalysis/tp_60min/Bootstrap/sifList.RData")
for(i in 1:length(sifList)){
if(i == 1){
allSIF <- sifList[[i]]
}
else{
allSIF <- rbind(allSIF, sifList[[i]])
}
}
kk <- which(allSIF[, 3]=="MK01_HUMAN")
which(allSIF[kk, 1]=="MK01_HUMAN_S29")
which(allSIF[kk, 1]=="MK01_HUMAN_Y187")
which(allSIF[kk, 1]=="MK01_HUMAN_Y205")
which(allSIF[, 3]=="MK01_HUMAN_Y205" && allSIF[, 1]=="SRC_HUMAN")
length(which(allSIF[kk, 1]=="MK01_HUMAN_Y187"))
length(which(allSIF[kk, 1]=="MK01_HUMAN_Y205"))
intersect(which(allSIF[, 1]=="SRC_HUMAN"), which(allSIF[, 3]=="MK01_HUMAN_Y205"))
length(intersect(which(allSIF[, 1]=="SRC_HUMAN"), which(allSIF[, 3]=="MK01_HUMAN_Y205")))
setwd("")
# Load packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(readr)
##
load("allInteractions.RData")
load(file = "dataGMMtp1.RData")
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
dataGMM<-new("GMMres", res=GMM, IDmap=GMM.ID, resFC=GMM.wFC)
dataInput <- dataGMM
##
targets.P <- list(cond2=c("MP2K1_HUMAN", "MK01_HUMAN", "MK03_HUMAN"), cond3=c("GSK3B_HUMAN"), cond4=c("AKT1_HUMAN", "ATM_HUMAN"),
cond5=c("PDPK1_HUMAN"), cond6=c("ATR_HUMAN"), cond7=c("CDK1_HUMAN", "CDK2_HUMAN", "CDK5_HUMAN"), cond8=c("KPCA_HUMAN"),
cond9=c("MTOR_HUMAN"), cond10=c("KPCD_HUMAN"), cond11=c("MK14_HUMAN"), cond12=c("AKT1_HUMAN", "KAPCA_HUMAN"),
cond13=c("CDK1_HUMAN", "CDK2_HUMAN", "CDK5_HUMAN"), cond14=c("MK08_HUMAN"), cond16=c("CHK1_HUMAN"), cond17=c("MTOR_HUMAN", "PK3CA_HUMAN"))
conditions <- list(c("cond2"), c("cond3"), c("cond4"), c("cond5"), c("cond6"), c("cond7"), c("cond8"), c("cond9"), c("cond10"),
c("cond11"), c("cond12"), c("cond13"), c("cond14"), c("cond16"), c("cond17"))
names(conditions) <- paste0("condition - ", c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17))
data.P <- dataBycond(dataGMM, bg, scaled = TRUE, rowBycond = conditions)
experiments <- conditions
show(data.P)
speciesP(data.P)
##
source("buildDataMatrix.R")
source("ilpFunctions.R")
source("build_Nw.R")
source("runPHONEMeS.R")
source("build_PKN.R")
res <- runPHONEMeS(dataInput = dataInput, bg = bg, targets.P = targets.P, data.P = data.P, experiments = experiments, sizePen = 0.1)
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(readr)
load("allInteractions.RData")
load("allInteractions.RData")
?beta
library(CNORfuzzy)
library(CNORfuzzy)
data(CNOlistToy, package="CellNOptR")
data(ToyModel, package="CellNOptR")
data(CNOlistToy, package="CellNOptR")
CNOlistToy = CNOlist(CNOlistToy)
print(CNOlistToy)
# with the old CNOlist (output of makeCNOlist), type
data(CNOlistToy, package="CellNOptR")
plotCNOlist(CNOlistToy)
# with the new version, just type:
CNOlistToy = CNOlist(CNOlistToy)
plot(CNOlistToy)
paramsList = defaultParametersFuzzy(CNOlistToy, ToyModel)
paramsList$popSize = 50
paramsList$maxGens = 50
paramsList$optimisation$maxtime = 30
N = 1
allRes = list()
paramsList$verbose=TRUE
for (i in 1:N){
Res = CNORwrapFuzzy(CNOlistToy, ToyModel, paramsList=paramsList)
allRes[[i]] = Res
}
allRes
plotMeanFuzzyFit(0.1, summary$allFinalMSEs, allRes,
plotParams=list(cmap_scale=0.5, cex=.9, margin=0.3))
summary = compileMultiRes(allRes,show=FALSE)
plotMeanFuzzyFit(0.1, summary$allFinalMSEs, allRes,
plotParams=list(cmap_scale=0.5, cex=.9, margin=0.3))
summary$allFinalMSEs
summary$allFinalNumParams
length(ToyModel$reacID)
length(ToyModel$namesSpecies)
library(CNORfuzzy)
data(DreamModel, package="CellNOptR")
data(CNOlistDREAM, package="CellNOptR")
# Default parameters
paramsList = defaultParametersFuzzy(CNOlistDREAM, DreamModel)
# Some Genetic Algorithm parameters
paramsList$popSize = 50
paramsList$maxTime = 5*60
paramsList$maxGens = 200
paramsList$stallGenMax = 50
paramsList$verbose = FALSE
# Default Fuzzy Logic Type1 parameters (Hill transfer functions)
nrow = 7
paramsList$type1Funs = matrix(data = NaN,nrow=nrow,ncol=3)
paramsList$type1Funs[,1] = 1
paramsList$type1Funs[,2] = c(3, 3, 3, 3, 3, 3, 1.01)
paramsList$type1Funs[,3] = c(0.2, 0.3, 0.4, 0.55, 0.72,1.03, 68.5098)
# Default Fuzzy Logic Type2 parameters
nrow = 7
paramsList$type2Funs = matrix(data = NaN,nrow=nrow,ncol=3)
paramsList$type2Funs[,1] = seq(from=0.2, to=0.8, length=nrow)
#paramsList$type2Funs[,1] = c(0.2,0.3,0.4,0.5,0.6,0.7,0.8)
paramsList$type2Funs[,2] = 1
paramsList$type2Funs[,3] = 1
paramsList$redThres = c(0, 0.0001, 0.0005, 0.001, 0.003, 0.005, 0.01)
paramsList$optimisation$algorithm = "NLOPT_LN_SBPLX"
paramsList$optimisation$xtol_abs = 0.001
paramsList$optimisation$maxeval = 10000
paramsList$optimisation$maxtime = 60*5
N = 10
allRes = list()
for (i in 1:N){
7
Res = CNORwrapFuzzy(CNOlistDREAM, DreamModel, paramsList=paramsList,
verbose=TRUE)
allRes[[i]] = Res
}
summary = compileMultiRes(allRes, show=TRUE)
plotMeanFuzzyFit(0.01, summary$allFinalMSEs, allRes)
plotMeanFuzzyFit(0.5, summary$allFinalMSEs, allRes)
writeFuzzyNetwork(0.01, summary$allFinalMSEs, allRes, "output_dream")
library(readr)
prunnedPKN_sif <- read_delim("~/Desktop/PHONEMeS-Ariel/Very-Final/InitialAnalysis/postFeeder/prunnedPKN.sif.txt",
" ", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(prunnedPKN_sif)
net1 <- prunnedPKN_sif
library(readr)
prunnedPKN_sif <- read_delim("~/Desktop/PHONEMeS-Ariel/Very-Final/InitialAnalysis/preFeeder/prunnedPKN.sif.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(prunnedPKN_sif)
net2 <-prunnedPKN_sif
View(net1)
View(net2)
?format
format(1810032000, scientific = FALSE)
format(0.000003, scientific = FALSE)
format(0.000003, scientific = TRUE)
format(0.000003, scientific = FALSE)
2^20
intToBits(2^20)
intToBits(1)
intToBits(1)[1:20]
intToBits(2^15)[1:20]
length(intToBits(2^20))
intToBits(2^20, 20)
intToBits(2^20)
intToBits(1377)
intToBits(1)
remove.packages(pkgs = "CellNOptR")
remove.packages(CellNOptR)
remove.packages(CNORode2017)
remove.packages("CNORode2017")
remove.packages("CNORode2017")
remove.packages("MEIGOR")
install.packages("ggraph")
install.packages("ggraph")
library("ggraph")
library(CytobankAPI)
data<-matrix(1:9,nrow=3,ncol=3,byrow=TRUE)
colnames(data)<-c("Control","Patient1","Patient2")
rownames(data)<-c("Marker1","Marker2","Marker3")
#Normalizing patient data to control sample with cofactor of 5
asinnorm(data,1,5)
asinh(x = data)
?asinh
data
asinh(8/7)
asinh(7/8)
asinh(1/100)
asinnorm<-function(mat,col,cofactor){
norm<-asinh(mat[,col]/cofactor)
tmat<-asinh(mat/cofactor)
x<-tmat-norm
return(x)
}
data<-matrix(1:9,nrow=3,ncol=3,byrow=TRUE)
colnames(data)<-c("Control","Patient1","Patient2")
rownames(data)<-c("Marker1","Marker2","Marker3")
#Normalizing patient data to control sample with cofactor of 5
asinnorm(data,1,5)
data<-matrix(9:1,nrow=3,ncol=3,byrow=TRUE)
colnames(data)<-c("Control","Patient1","Patient2")
rownames(data)<-c("Marker1","Marker2","Marker3")
#Normalizing patient data to control sample with cofactor of 5
asinnorm(data,1,5)
library(CARNIVAL)
?runCARNIVAL
median(x = c(1, 2, 3, 4))
setwd("~/Documents/GitHub/PHONEMeS-ILP/Examples/PHONEMeSdt/Batth-etal/")
#  Copyright (c) 2018 - RWTH Aachen University
#
#  File author(s): Enio Gjerga
#
#  Distributed under the GPLv3 License.
#  See accompanying file LICENSE.txt or copy at
#      http://www.gnu.org/licenses/gpl-3.0.html
#
#  email: enio.gjerga@gmai.com
#
##############################################################################
# 13:22 23/03/2018
# This script is used to produce the PHONEMeS Outputs by calling the functions
# which write the ILP formulation
#load the packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(CellNOptR)
library(tidyr)
library(dplyr)
# Call the PHONEMeS functions
source("../../../Public/buildDataMatrix.R")
source("../../../Public/ilpFunctions.R")
source("../../../Public/buildDataObject.R")
source("../../../Public/build_Nw.R")
source("../../../Public/build_PKN.R")
load(paste0(getwd(), "/dataObject/GMM.ID.RData"))
load(paste0(getwd(), "/dataObject/GMM.RData"))
load(paste0(getwd(), "/dataObject/GMM.wFC.RData"))
load(paste0(getwd(), "/Background-Network/allD_MOUSE.RData"))
allD <- BN
#Make the data objects that will be needed
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
dataGMM<-new("GMMres", res=GMM, IDmap=GMM.ID, resFC=GMM.wFC)
conditions <- list(c("3min_PDGF"), c("3min_IGF1"), c("3min_FGF2"), c("15min_PDGF"), c("15min_IGF1"), c("15min_FGF2"))
names(conditions) <- c("cond1_3min", "cond2_3min", "cond3_3min", "cnod1_15min", "cond2_15min", "cond3_15min")
targets.P <- list(cond1_3min=c("PDGFR"), cond2_3min=c("IGF1R"), cond3_3min=c("FGFR2"), cond1_15min=c("PDGFR"), cond2_15min=c("IGF1R"), cond3_15min=c("FGFR2"))
experiments <- list(tp1=c(1, 2, 3), tp2=c(4, 5, 6)) # pdgfr only
# experiments <- list(tp1=c(1, 2, 3), tp2=c(4, 5, 6)) # if you want to consider all the three conditions for each time-point then do: experiments <- list(tp1=c(1, 2, 3), tp2=c(4, 5, 6))
#Generating the networks
source("../../../Public/runPHONEMeS_dt.R")
tpSIF <- runPHONEMeS_dt(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, nIter = 100)
rm(list = ls())
#  Copyright (c) 2018 - RWTH Aachen University
#
#  File author(s): Enio Gjerga
#
#  Distributed under the GPLv3 License.
#  See accompanying file LICENSE.txt or copy at
#      http://www.gnu.org/licenses/gpl-3.0.html
#
#  email: enio.gjerga@gmai.com
#
##############################################################################
# 13:22 23/03/2018
# This script is used to produce the PHONEMeS Outputs by calling the functions
# which write the ILP formulation
#load the packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(CellNOptR)
library(tidyr)
library(dplyr)
# Call the PHONEMeS functions
source("../../../Public/buildDataMatrix.R")
source("../../../Public/ilpFunctions.R")
source("../../../Public/buildDataObject.R")
source("../../../Public/build_Nw.R")
source("../../../Public/build_PKN.R")
load(paste0(getwd(), "/dataObject/GMM.ID.RData"))
load(paste0(getwd(), "/dataObject/GMM.RData"))
load(paste0(getwd(), "/dataObject/GMM.wFC.RData"))
load(paste0(getwd(), "/Background-Network/allD_MOUSE.RData"))
allD <- BN
#Make the data objects that will be needed
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
dataGMM<-new("GMMres", res=GMM, IDmap=GMM.ID, resFC=GMM.wFC)
conditions <- list(c("3min_PDGF"), c("3min_IGF1"), c("3min_FGF2"), c("15min_PDGF"), c("15min_IGF1"), c("15min_FGF2"))
names(conditions) <- c("cond1_3min", "cond2_3min", "cond3_3min", "cnod1_15min", "cond2_15min", "cond3_15min")
targets.P <- list(cond1_3min=c("PDGFR"), cond2_3min=c("IGF1R"), cond3_3min=c("FGFR2"), cond1_15min=c("PDGFR"), cond2_15min=c("IGF1R"), cond3_15min=c("FGFR2"))
experiments <- list(tp1=c(1), tp2=c(4)) # pdgfr only
# experiments <- list(tp1=c(1, 2, 3), tp2=c(4, 5, 6)) # if you want to consider all the three conditions for each time-point then do: experiments <- list(tp1=c(1, 2, 3), tp2=c(4, 5, 6))
#Generating the networks
source("../../../Public/runPHONEMeS_dt.R")
tpSIF <- runPHONEMeS_dt(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg, nIter = 100)
