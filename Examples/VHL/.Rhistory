library(threejs)
library(CARNIVAL)
test <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = network_with_metab, measurements = measurements, inputs = inputs, timelimit = 1000)
edges <- as.data.frame(test$weightedSIF)
nodes <- as.data.frame(test$nodesAttributes)
nodes <- nodes[nodes$Node %in% edges$Node1 | nodes$Node %in% edges$Node2,]
names(nodes)[1] <- "id"
nodes$label <- nodes$id
nodes$color <- ifelse(as.numeric(as.character(nodes$UpAct)) > 0, "green", "red")
names(edges) <- c("from","sign","to","weight")
edges$color <- ifelse(as.numeric(as.character(edges$sign)) > 0, "green", "red")
edges$arrows <- "to"
visNetwork(nodes = nodes, edges = edges)
visNetwork(nodes = nodes, edges = edges)
temp <- test
i <- 39
k <- 1
compartments <- c(unique(gsub(".*_","",network_with_metab[grepl("_",network_with_metab[,1]),1])),unique(gsub(".*_","",network_with_metab[grepl("_",network_with_metab[,2]),2])))
compartments <- compartments[!grepl("[0-9]",compartments)]
compartments <- compartments[!grepl("reverse",compartments)]
compartments
inputs <- c(sign(nodes[cor_network_full[i,1],2]))
names(inputs) <- nodes[cor_network_full[i,1],1]
inputs <- as.data.frame(t(inputs))
nodes_kinase <- kinase_activities_TUvsKI_symbol[kinase_activities_TUvsKI_symbol$kinase %in% unique(c(cor_network_full$specie_A,cor_network_full$specie_B)),c(2,1)]
edges <- cor_network_full
nodes_metab <- ttop_metab_TUvsKI[ttop_metab_TUvsKI$ID %in% unique(c(cor_network_full$specie_A,cor_network_full$specie_B)),c(1,4)]
names(nodes_metab) <- c("id","value")
names(nodes_kinase) <- c("id","value")
nodes <- as.data.frame(rbind(nodes_kinase, nodes_metab))
row.names(nodes) <-  nodes$id
nodes$label <- nodes$id
nodes$color <- ifelse(nodes$value > 0, "green","red")
nodes$value <- abs(nodes$value)
names(edges) <- c("from","to","width")
edges$color <- ifelse(edges$width > 0, "green","red")
edges$width <- abs(edges$width)*10
inputs <- c(sign(nodes[cor_network_full[i,1],2]))
names(inputs) <- nodes[cor_network_full[i,1],1]
inputs <- as.data.frame(t(inputs))
print(inputs)
print("Measurment generation")
measurements <- c(nodes[cor_network_full[i,2],2])
names(measurements) <- nodes[cor_network_full[i,2],1]
measurements <- as.data.frame(t(measurements))
measurements
network_with_metab[grepl(names(measurements),network_with_metab$source),]
network_with_metab[grepl(names(measurements),network_with_metab$target),]
measurements <- c(nodes[cor_network_full[i,2],2])
names(measurements) <- nodes[cor_network_full[i,2],1]
measurements <- as.data.frame(t(measurements))
names(measurements) <- paste(names(measurements),"_c",sep = "")
measurements$akg_m <- measurements$akg_c
print(measurements)
test <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = network_with_metab, measurements = measurements, inputs = inputs, timelimit = 1000)
test <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = network_with_metab, measurements = measurements, inputs = inputs, timelimit = 60)
View(runCARNIVAL)
View(inputs)
View(measurements)
save(inputs,file = "~/Desktop/for_pan/inputs.RData")
sve(measurements, file = "~/Desktop/for_pan/measurments.RData")
save(measurements, file = "~/Desktop/for_pan/measurments.RData")
save(network_with_metab, file = "~/Desktop/for_pan/network_with_metab.Data")
save(network_with_metab, file = "~/Desktop/for_pan/network_with_metab.RData")
network_with_metab[,1] <- gsub(" ",";",network_with_metab[,1])
network_with_metab[,3] <- gsub(" ",";",network_with_metab[,3])
test <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = network_with_metab, measurements = measurements, inputs = inputs, timelimit = 60)
edges <- as.data.frame(test$weightedSIF)
nodes <- as.data.frame(test$nodesAttributes)
nodes <- nodes[nodes$Node %in% edges$Node1 | nodes$Node %in% edges$Node2,]
names(nodes)[1] <- "id"
nodes$label <- nodes$id
nodes$color <- ifelse(as.numeric(as.character(nodes$UpAct)) > 0, "green", "red")
names(edges) <- c("from","sign","to","weight")
edges$color <- ifelse(as.numeric(as.character(edges$sign)) > 0, "green", "red")
edges$arrows <- "to"
visNetwork(nodes = nodes, edges = edges)
visNetwork(nodes = nodes, edges = edges)
View(ttop_phospho_TUvsKI)
network_with_metab[network_with_metab$source == CDK1 & network_with_metab$target == SP1,]
network_with_metab[network_with_metab$source == "CDK1" & network_with_metab$target == "SP1",]
network_with_metab[network_with_metab$source == "CDK1" & network_with_metab$target == "SP1","Interaction"] <- -1 #https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4267622/ ;; https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3707305/
test <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = network_with_metab, measurements = measurements, inputs = inputs, timelimit = 60)
edges <- as.data.frame(test$weightedSIF)
nodes <- as.data.frame(test$nodesAttributes)
nodes <- nodes[nodes$Node %in% edges$Node1 | nodes$Node %in% edges$Node2,]
names(nodes)[1] <- "id"
nodes$label <- nodes$id
nodes$color <- ifelse(as.numeric(as.character(nodes$UpAct)) > 0, "green", "red")
names(edges) <- c("from","sign","to","weight")
edges$color <- ifelse(as.numeric(as.character(edges$sign)) > 0, "green", "red")
edges$arrows <- "to"
visNetwork(nodes = nodes, edges = edges)
visNetwork(nodes = nodes, edges = edges)
network_with_metab[network_with_metab$source == "ATM" & network_with_metab$target == "SP1","Interaction"] <- -1 #https://www.ncbi.nlm.nih.gov/pubmed/17161377?dopt=Abstract
test <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = network_with_metab, measurements = measurements, inputs = inputs, timelimit = 60)
edges <- as.data.frame(test$weightedSIF)
nodes <- as.data.frame(test$nodesAttributes)
nodes <- nodes[nodes$Node %in% edges$Node1 | nodes$Node %in% edges$Node2,]
names(nodes)[1] <- "id"
nodes$label <- nodes$id
nodes$color <- ifelse(as.numeric(as.character(nodes$UpAct)) > 0, "green", "red")
names(edges) <- c("from","sign","to","weight")
edges$color <- ifelse(as.numeric(as.character(edges$sign)) > 0, "green", "red")
edges$arrows <- "to"
visNetwork(nodes = nodes, edges = edges)
visNetwork(nodes = nodes, edges = edges)
.85
.85^5
save.image("~/Dropbox/kidney_fibrosis_multiomics/analysis/multiomic/multiOmic_env.RData")
load("~/Dropbox/kidney_fibrosis_multiomics/analysis/multiomic/multiOmic_env.RData")
knitr::opts_chunk$set(echo = TRUE)
edges <- as.data.frame(test$weightedSIF)
nodes <- as.data.frame(test$nodesAttributes)
nodes <- nodes[nodes$Node %in% edges$Node1 | nodes$Node %in% edges$Node2,]
names(nodes)[1] <- "id"
nodes$label <- nodes$id
nodes$color <- ifelse(as.numeric(as.character(nodes$UpAct)) > 0, "green", "red")
names(edges) <- c("from","sign","to","weight")
edges$color <- ifelse(as.numeric(as.character(edges$sign)) > 0, "green", "red")
edges$arrows <- "to"
visNetwork(nodes = nodes, edges = edges)
library(readr)
library(omicToolsTest)
library(viper)
library(fgsea)
library(vsn)
library(limma)
require(igraph)
require(dplyr)
library(visNetwork)
visNetwork(nodes = nodes, edges = edges)
View(phospho_all_vsn_TU)
View(phospho_all_vsn)
View(metab_all_vsn)
met_samples <- names(metab_all_vsn)
phospho_sanples <- names(phospho_all_vsn)
intersect(met_samples, phospho_sanples)
length(intersect(met_samples, phospho_sanples))
met_samples <- met_samples[!(grepl("TU",met_samples))]
phospho_sanples <- phospho_sanples[!grepl("TU",phospho_sanples)]
length(intersect(met_samples, phospho_sanples))
intersect(met_samples, phospho_sanples)
intersect(met_samples, phospho_sanples)
met_samples
phospho_sanples
sort(phospho_sanples)
sort(met_samples)
measurements <- c(nodes[cor_network_full[i,2],2])
names(measurements) <- nodes[cor_network_full[i,2],1]
measurements <- as.data.frame(t(measurements))
measurements
i <- 39
i <- 39
k <- 1
nodes_kinase <- kinase_activities_TUvsKI_symbol[kinase_activities_TUvsKI_symbol$kinase %in% unique(c(cor_network_full$specie_A,cor_network_full$specie_B)),c(2,1)]
edges <- cor_network_full
nodes_metab <- ttop_metab_TUvsKI[ttop_metab_TUvsKI$ID %in% unique(c(cor_network_full$specie_A,cor_network_full$specie_B)),c(1,4)]
names(nodes_metab) <- c("id","value")
names(nodes_kinase) <- c("id","value")
nodes <- as.data.frame(rbind(nodes_kinase, nodes_metab))
row.names(nodes) <-  nodes$id
nodes$label <- nodes$id
nodes$color <- ifelse(nodes$value > 0, "green","red")
nodes$value <- abs(nodes$value)
names(edges) <- c("from","to","width")
edges$color <- ifelse(edges$width > 0, "green","red")
edges$width <- abs(edges$width)*10
compartments <- c(unique(gsub(".*_","",network_with_metab[grepl("_",network_with_metab[,1]),1])),unique(gsub(".*_","",network_with_metab[grepl("_",network_with_metab[,2]),2])))
compartments <- compartments[!grepl("[0-9]",compartments)]
compartments <- compartments[!grepl("reverse",compartments)]
compartments
inputs <- c(sign(nodes[cor_network_full[i,1],2]))
names(inputs) <- nodes[cor_network_full[i,1],1]
inputs <- as.data.frame(t(inputs))
print(inputs)
print("Measurment generation")
measurements <- c(nodes[cor_network_full[i,2],2])
names(measurements) <- nodes[cor_network_full[i,2],1]
measurements <- as.data.frame(t(measurements))
measurements
compartments
compartments <- compartments[!grepl("e",compartments)]
compartments
measurements <- rep(c(nodes[cor_network_full[i,2],2]),length(compartments))
measurements
names(inputs) <- nodes[cor_network_full[i,1],1]
measurements
paste(nodes[cor_network_full[i,2],1],compartments,"_")
paste(nodes[cor_network_full[i,2],1],compartments,sep = "_")
measurements <- rep(c(nodes[cor_network_full[i,2],2]),length(compartments))
names(measurements) <- paste(nodes[cor_network_full[i,2],1],compartments,sep = "_")
measurements
measurements <- as.data.frame(t(measurements))
measurements
time_lim <- 5
nodes_kinase <- kinase_activities_TUvsKI_symbol[kinase_activities_TUvsKI_symbol$kinase %in% unique(c(cor_network_full$specie_A,cor_network_full$specie_B)),c(2,1)]
edges <- cor_network_full
nodes_metab <- ttop_metab_TUvsKI[ttop_metab_TUvsKI$ID %in% unique(c(cor_network_full$specie_A,cor_network_full$specie_B)),c(1,4)]
names(nodes_metab) <- c("id","value")
names(nodes_kinase) <- c("id","value")
nodes <- as.data.frame(rbind(nodes_kinase, nodes_metab))
row.names(nodes) <-  nodes$id
nodes$label <- nodes$id
nodes$color <- ifelse(nodes$value > 0, "green","red")
nodes$value <- abs(nodes$value)
names(edges) <- c("from","to","width")
edges$color <- ifelse(edges$width > 0, "green","red")
edges$width <- abs(edges$width)*10
sif_list <- list()
k <- 1
time_lim <- 5
sif_list <- list()
k <- 1
time_lim <- 5
for(i in 35:38)
{
if(i < 35)
{
print(k)
print("Input generation")
inputs <- c(sign(nodes[cor_network_full[i,1],2]))
names(inputs) <- nodes[cor_network_full[i,1],1]
inputs <- as.data.frame(t(inputs))
print(inputs)
print("Measurment generation")
measurements <- c(nodes[cor_network_full[i,2],2])
names(measurements) <- nodes[cor_network_full[i,2],1]
measurements <- as.data.frame(t(measurements))
print(measurements)
sif_list[[k]] <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = network_with_metab, measurements = measurements, inputs = inputs, timelimit = time_lim)
k <- k+1
}
else
{
print(k)
print("Input generation")
inputs <- c(sign(nodes[cor_network_full[i,1],2]))
names(inputs) <- nodes[cor_network_full[i,1],1]
inputs <- as.data.frame(t(inputs))
print(inputs)
print("Measurment generation")
measurements <- rep(c(nodes[cor_network_full[i,2],2]),length(compartments))
names(measurements) <- paste(nodes[cor_network_full[i,2],1],compartments,sep = "_")
measurements <- as.data.frame(t(measurements))
measurements <- measurements[,names(measurements) %in% c(network_with_metab$source,network_with_metab$target)]
print(measurements)
sif_list[[k]] <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = network_with_metab, measurements = measurements, inputs = inputs, timelimit = time_lim)
k <- k+1
}
}
library(CARNIVAL)
for(i in 35:38)
{
if(i < 35)
{
print(k)
print("Input generation")
inputs <- c(sign(nodes[cor_network_full[i,1],2]))
names(inputs) <- nodes[cor_network_full[i,1],1]
inputs <- as.data.frame(t(inputs))
print(inputs)
print("Measurment generation")
measurements <- c(nodes[cor_network_full[i,2],2])
names(measurements) <- nodes[cor_network_full[i,2],1]
measurements <- as.data.frame(t(measurements))
print(measurements)
sif_list[[k]] <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = network_with_metab, measurements = measurements, inputs = inputs, timelimit = time_lim)
k <- k+1
}
else
{
print(k)
print("Input generation")
inputs <- c(sign(nodes[cor_network_full[i,1],2]))
names(inputs) <- nodes[cor_network_full[i,1],1]
inputs <- as.data.frame(t(inputs))
print(inputs)
print("Measurment generation")
measurements <- rep(c(nodes[cor_network_full[i,2],2]),length(compartments))
names(measurements) <- paste(nodes[cor_network_full[i,2],1],compartments,sep = "_")
measurements <- as.data.frame(t(measurements))
measurements <- measurements[,names(measurements) %in% c(network_with_metab$source,network_with_metab$target)]
print(measurements)
sif_list[[k]] <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = network_with_metab, measurements = measurements, inputs = inputs, timelimit = time_lim)
k <- k+1
}
}
measurements
nodes
inputs
measurements
View(causal_network)
View(cor_network_full)
sif_list <- list()
k <- 1
time_lim <- 5
for(i in 34:37)
{
if(i < 35)
{
print(k)
print("Input generation")
inputs <- c(sign(nodes[cor_network_full[i,1],2]))
names(inputs) <- nodes[cor_network_full[i,1],1]
inputs <- as.data.frame(t(inputs))
print(inputs)
print("Measurment generation")
measurements <- c(nodes[cor_network_full[i,2],2])
names(measurements) <- nodes[cor_network_full[i,2],1]
measurements <- as.data.frame(t(measurements))
print(measurements)
sif_list[[k]] <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = network_with_metab, measurements = measurements, inputs = inputs, timelimit = time_lim)
k <- k+1
}
else
{
print(k)
print("Input generation")
inputs <- c(sign(nodes[cor_network_full[i,1],2]))
names(inputs) <- nodes[cor_network_full[i,1],1]
inputs <- as.data.frame(t(inputs))
print(inputs)
print("Measurment generation")
measurements <- rep(c(nodes[cor_network_full[i,2],2]),length(compartments))
names(measurements) <- paste(nodes[cor_network_full[i,2],1],compartments,sep = "_")
measurements <- as.data.frame(t(measurements))
measurements <- measurements[,names(measurements) %in% c(network_with_metab$source,network_with_metab$target)]
print(measurements)
sif_list[[k]] <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = network_with_metab, measurements = measurements, inputs = inputs, timelimit = time_lim)
k <- k+1
}
}
inputs
measurements
i
measurements <- rep(c(nodes[cor_network_full[i,2],2]),length(compartments))
names(measurements) <- paste(nodes[cor_network_full[i,2],1],compartments,sep = "_")
measurements
View(network_with_metab)
measurements <- rep(c(nodes[cor_network_full[i,2],2]),length(compartments))
names(measurements) <- paste(nodes[cor_network_full[i,2],1],compartments,sep = "_")
measurements <- as.data.frame(t(measurements))
measurements <- measurements[,names(measurements) %in% c(network_with_metab$source,network_with_metab$target)]
length(measurements[1,]
)
sif_list <- list()
k <- 1
time_lim <- 5
for(i in 35:37)
{
if(i < 35)
{
print(k)
print("Input generation")
inputs <- c(sign(nodes[cor_network_full[i,1],2]))
names(inputs) <- nodes[cor_network_full[i,1],1]
inputs <- as.data.frame(t(inputs))
print(inputs)
print("Measurment generation")
measurements <- c(nodes[cor_network_full[i,2],2])
names(measurements) <- nodes[cor_network_full[i,2],1]
measurements <- as.data.frame(t(measurements))
print(measurements)
sif_list[[k]] <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = network_with_metab, measurements = measurements, inputs = inputs, timelimit = time_lim)
k <- k+1
}
else
{
print(k)
print("Input generation")
inputs <- c(sign(nodes[cor_network_full[i,1],2]))
names(inputs) <- nodes[cor_network_full[i,1],1]
inputs <- as.data.frame(t(inputs))
print(inputs)
print("Measurment generation")
measurements <- rep(c(nodes[cor_network_full[i,2],2]),length(compartments))
names(measurements) <- paste(nodes[cor_network_full[i,2],1],compartments,sep = "_")
measurements <- as.data.frame(t(measurements))
measurements <- measurements[,names(measurements) %in% c(network_with_metab$source,network_with_metab$target)]
print(measurements)
if(length(measurements[1,]) > 0)
{
sif_list[[k]] <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = network_with_metab, measurements = measurements, inputs = inputs, timelimit = time_lim)
}
k <- k+1
}
}
for(i in 34:37)
{
if(i < 35)
{
print(k)
print("Input generation")
inputs <- c(sign(nodes[cor_network_full[i,2],2]))
names(inputs) <- nodes[cor_network_full[i,2],1]
inputs <- as.data.frame(t(inputs))
print(inputs)
print("Measurment generation")
measurements <- c(nodes[cor_network_full[i,1],2])
names(measurements) <- nodes[cor_network_full[i,1],1]
measurements <- as.data.frame(t(measurements))
print(measurements)
sif_list[[k]] <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = network_with_metab, measurements = measurements, inputs = inputs, timelimit = time_lim)
k <- k+1
}
else
{
print(k)
print("Input generation")
inputs <- rep(c(sign(nodes[cor_network_full[i,2],2])), length(compartments))
names(inputs) <- paste(nodes[cor_network_full[i,2],1], compartments, sep = "_")
inputs <- as.data.frame(t(inputs))
inputs <- inputs[,names(inputs) %in% c(network_with_metab$source,network_with_metab$target)]
print(inputs)
print("Measurment generation")
measurements <- c(nodes[cor_network_full[i,1],2])
names(measurements) <- nodes[cor_network_full[i,1],1]
measurements <- as.data.frame(t(measurements))
print(measurements)
if(length(inputs[1,]) > 0)
{
sif_list[[k]] <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = network_with_metab, measurements = measurements, inputs = inputs, timelimit = time_lim)
}
k <- k+1
}
}
save.image("~/Desktop/Untitled.RData")
load("~/Documents/PHONEMeS-ILP/Examples/UD_marco_VHL/input_PHONEMES_UD.Rdata")
View(for_enio)
mc <- for_enio$metastasis_vs_cancer
View(mc$KSN)
setwd("~/Documents/PHONEMeS-ILP/Examples/VHL")
# Load packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(dplyr)
# Call the PHONEMeS functions
source("../../Public/buildDataMatrix.R")
source("../../Public/ilpFunctions.R")
source("../../Public/buildDataObject.R")
source("../../Public/build_Nw.R")
source("../../Public/build_PKN.R")
source("../../Public/build_Nw_Inv.R")
source("../../Public/build_PKN_Inv.R")
source("../../Public/PKN_list.R")
source("../../Public/assignAttributes.R")
source("../../Public/runPHONEMeS_UD.R")
load(paste0(getwd(), "/Background-Network/allD.RData"))
load(paste0(getwd(), "/Data/GMM.ID.RData"))
load(paste0(getwd(), "/Data/GMM.RData"))
load(paste0(getwd(), "/Data/GMM.wFC.RData"))
load(paste0(getwd(), "/Data/kinaseList.RData"))
install.packages("BioNet")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BioNet", version = "3.8")
installed.packages("PHONEMeS")
installed.packages("hash")
# Load packages
library(BioNet)
library(igraph)
library(PHONEMeS)
library(hash)
library(dplyr)
installed.packages("hash")
install.packages("hash")
install.packages("PHONEMeS")
# Load packages
library(BioNet)
library(igraph)
# library(PHONEMeS)
library(hash)
library(dplyr)
# Call the PHONEMeS functions
source("../../Public/buildDataMatrix.R")
source("../../Public/ilpFunctions.R")
source("../../Public/buildDataObject.R")
source("../../Public/build_Nw.R")
source("../../Public/build_PKN.R")
source("../../Public/build_Nw_Inv.R")
source("../../Public/build_PKN_Inv.R")
source("../../Public/PKN_list.R")
source("../../Public/assignAttributes.R")
source("../../Public/runPHONEMeS_UD.R")
load(paste0(getwd(), "/Background-Network/allD.RData"))
load(paste0(getwd(), "/Data/GMM.ID.RData"))
load(paste0(getwd(), "/Data/GMM.RData"))
load(paste0(getwd(), "/Data/GMM.wFC.RData"))
load(paste0(getwd(), "/Data/kinaseList.RData"))
#Make the data objects that will be needed
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
View(allD)
install.packages("~/Downloads/PHONEMeS_0.2.7.tar.gz", repos=NULL)
library(PHONEMeS)
#Make the data objects that will be needed
bg<-new("KPSbg", interactions=allD, species=unique(c(allD$K.ID, allD$S.cc)))
View(for_enio)
View(bg)
dataGMM<-new("GMMres", res=GMM, IDmap=GMM.ID, resFC=GMM.wFC)
conditions <- list(c("cancer_vs_healthy"), c("metastasis_vs_healthy"), c("metastasis_vs_cancer"), c("metastasis_resolution"))
names(conditions) <- c("cond1", "cond2", "cond3", "cond4")
targets.P<-list(cond1=kinaseList[[1]], cond2=kinaseList[[2]], cond3=kinaseList[[3]], cond4=kinaseList[[4]])
# Select experimental condition
experiments <- c(1) # cancer_vs_healthy
experiments <- c(3) # metastasis_vs_cancer
sif <- runPHONEMeS_UD(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg)
sif <- runPHONEMeS_UD(targets.P = targets.P, conditions = conditions, dataGMM = dataGMM, experiments = experiments, bg = bg)
View(sif)
View(sif$Combined)
